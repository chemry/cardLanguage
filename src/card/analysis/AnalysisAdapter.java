/* This file was generated by SableCC (http://www.sablecc.org/). */

package card.analysis;

import java.util.*;
import card.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    public void caseAClassDefine(AClassDefine node)
    {
        defaultCase(node);
    }

    public void caseAClassName(AClassName node)
    {
        defaultCase(node);
    }

    public void caseAAddPattern(AAddPattern node)
    {
        defaultCase(node);
    }

    public void caseAPatternDeclare(APatternDeclare node)
    {
        defaultCase(node);
    }

    public void caseAPatternDeclareCombine(APatternDeclareCombine node)
    {
        defaultCase(node);
    }

    public void caseAPatternDeclareCompare(APatternDeclareCompare node)
    {
        defaultCase(node);
    }

    public void caseAPatternDeclareOver(APatternDeclareOver node)
    {
        defaultCase(node);
    }

    public void caseAPatternKeyCombine(APatternKeyCombine node)
    {
        defaultCase(node);
    }

    public void caseAEmptyPatternKeyCombineRest(AEmptyPatternKeyCombineRest node)
    {
        defaultCase(node);
    }

    public void caseANonEmptyPatternKeyCombineRest(ANonEmptyPatternKeyCombineRest node)
    {
        defaultCase(node);
    }

    public void caseAPatternKey(APatternKey node)
    {
        defaultCase(node);
    }

    public void caseASamePatternKeyword(ASamePatternKeyword node)
    {
        defaultCase(node);
    }

    public void caseAStraightPatternKeyword(AStraightPatternKeyword node)
    {
        defaultCase(node);
    }

    public void caseAFlushPatternKeyword(AFlushPatternKeyword node)
    {
        defaultCase(node);
    }

    public void caseASingleRange(ASingleRange node)
    {
        defaultCase(node);
    }

    public void caseAMultiRange(AMultiRange node)
    {
        defaultCase(node);
    }

    public void caseARangeRest(ARangeRest node)
    {
        defaultCase(node);
    }

    public void caseAPatternCompare(APatternCompare node)
    {
        defaultCase(node);
    }

    public void caseAEmptyCompareRest(AEmptyCompareRest node)
    {
        defaultCase(node);
    }

    public void caseAMultiCompareRest(AMultiCompareRest node)
    {
        defaultCase(node);
    }

    public void caseABigCompareRule(ABigCompareRule node)
    {
        defaultCase(node);
    }

    public void caseASmallCompareRule(ASmallCompareRule node)
    {
        defaultCase(node);
    }

    public void caseAEqualCompareRule(AEqualCompareRule node)
    {
        defaultCase(node);
    }

    public void caseASuitCompareRule(ASuitCompareRule node)
    {
        defaultCase(node);
    }

    public void caseAEmptyPatternOverRule(AEmptyPatternOverRule node)
    {
        defaultCase(node);
    }

    public void caseARestPatternOverRule(ARestPatternOverRule node)
    {
        defaultCase(node);
    }

    public void caseAEmptyPatternOverRest(AEmptyPatternOverRest node)
    {
        defaultCase(node);
    }

    public void caseARestPatternOverRest(ARestPatternOverRest node)
    {
        defaultCase(node);
    }

    public void caseAPattern(APattern node)
    {
        defaultCase(node);
    }

    public void caseAConfig(AConfig node)
    {
        defaultCase(node);
    }

    public void caseAConfigStmt(AConfigStmt node)
    {
        defaultCase(node);
    }

    public void caseAWinConfigKeyword(AWinConfigKeyword node)
    {
        defaultCase(node);
    }

    public void caseASystempairConfigKeyword(ASystempairConfigKeyword node)
    {
        defaultCase(node);
    }

    public void caseASelfreplaceConfigKeyword(ASelfreplaceConfigKeyword node)
    {
        defaultCase(node);
    }

    public void caseANextConfigKeyword(ANextConfigKeyword node)
    {
        defaultCase(node);
    }

    public void caseADefaultstatusConfigKeyword(ADefaultstatusConfigKeyword node)
    {
        defaultCase(node);
    }

    public void caseARankConfigKeyword(ARankConfigKeyword node)
    {
        defaultCase(node);
    }

    public void caseAWinValueConfigValue(AWinValueConfigValue node)
    {
        defaultCase(node);
    }

    public void caseABooleanConfigValue(ABooleanConfigValue node)
    {
        defaultCase(node);
    }

    public void caseANumberConfigValue(ANumberConfigValue node)
    {
        defaultCase(node);
    }

    public void caseARankNameConfigValue(ARankNameConfigValue node)
    {
        defaultCase(node);
    }

    public void caseAWinValue(AWinValue node)
    {
        defaultCase(node);
    }

    public void caseATrueBoolean(ATrueBoolean node)
    {
        defaultCase(node);
    }

    public void caseAFalseBoolean(AFalseBoolean node)
    {
        defaultCase(node);
    }

    public void caseARankName(ARankName node)
    {
        defaultCase(node);
    }

    public void caseABeforeValidStmt(ABeforeValidStmt node)
    {
        defaultCase(node);
    }

    public void caseAAfterValidStmt(AAfterValidStmt node)
    {
        defaultCase(node);
    }

    public void caseAEmptyBeforStmt(AEmptyBeforStmt node)
    {
        defaultCase(node);
    }

    public void caseABeforeBeforStmt(ABeforeBeforStmt node)
    {
        defaultCase(node);
    }

    public void caseAEmptyAfterStmt(AEmptyAfterStmt node)
    {
        defaultCase(node);
    }

    public void caseAAfterAfterStmt(AAfterAfterStmt node)
    {
        defaultCase(node);
    }

    public void caseAInitCard(AInitCard node)
    {
        defaultCase(node);
    }

    public void caseAInitPlayer(AInitPlayer node)
    {
        defaultCase(node);
    }

    public void caseAInitCardStmt(AInitCardStmt node)
    {
        defaultCase(node);
    }

    public void caseAEmptyInitStmtRest(AEmptyInitStmtRest node)
    {
        defaultCase(node);
    }

    public void caseARestInitStmtRest(ARestInitStmtRest node)
    {
        defaultCase(node);
    }

    public void caseAInitStmt(AInitStmt node)
    {
        defaultCase(node);
    }

    public void caseAFuncStmt(AFuncStmt node)
    {
        defaultCase(node);
    }

    public void caseADrawtoFuncKeyword(ADrawtoFuncKeyword node)
    {
        defaultCase(node);
    }

    public void caseADrawtoallFuncKeyword(ADrawtoallFuncKeyword node)
    {
        defaultCase(node);
    }

    public void caseASetcurplayeridFuncKeyword(ASetcurplayeridFuncKeyword node)
    {
        defaultCase(node);
    }

    public void caseASetdisplaysizeFuncKeyword(ASetdisplaysizeFuncKeyword node)
    {
        defaultCase(node);
    }

    public void caseAEmptyFuncPara(AEmptyFuncPara node)
    {
        defaultCase(node);
    }

    public void caseANoEmptyFuncPara(ANoEmptyFuncPara node)
    {
        defaultCase(node);
    }

    public void caseAEmptyFuncParaRest(AEmptyFuncParaRest node)
    {
        defaultCase(node);
    }

    public void caseANoEmptyFuncParaRest(ANoEmptyFuncParaRest node)
    {
        defaultCase(node);
    }

    public void caseANumberPara(ANumberPara node)
    {
        defaultCase(node);
    }

    public void caseAIdPara(AIdPara node)
    {
        defaultCase(node);
    }

    public void caseAGetStatus(AGetStatus node)
    {
        defaultCase(node);
    }

    public void caseAIsValidCombination(AIsValidCombination node)
    {
        defaultCase(node);
    }

    public void caseACardSelected(ACardSelected node)
    {
        defaultCase(node);
    }

    public void caseAIsWinnerFound(AIsWinnerFound node)
    {
        defaultCase(node);
    }

    public void caseANextTurn(ANextTurn node)
    {
        defaultCase(node);
    }

    public void caseTKeywordClass(TKeywordClass node)
    {
        defaultCase(node);
    }

    public void caseTKeywordAddpattern(TKeywordAddpattern node)
    {
        defaultCase(node);
    }

    public void caseTKeywordSame(TKeywordSame node)
    {
        defaultCase(node);
    }

    public void caseTKeywordStraight(TKeywordStraight node)
    {
        defaultCase(node);
    }

    public void caseTKeywordFlush(TKeywordFlush node)
    {
        defaultCase(node);
    }

    public void caseTKeywordConfig(TKeywordConfig node)
    {
        defaultCase(node);
    }

    public void caseTKeywordWin(TKeywordWin node)
    {
        defaultCase(node);
    }

    public void caseTKeywordSystem(TKeywordSystem node)
    {
        defaultCase(node);
    }

    public void caseTKeywordSelfreplace(TKeywordSelfreplace node)
    {
        defaultCase(node);
    }

    public void caseTKeywordNext(TKeywordNext node)
    {
        defaultCase(node);
    }

    public void caseTKeywordDefaultstatus(TKeywordDefaultstatus node)
    {
        defaultCase(node);
    }

    public void caseTKeywordRank(TKeywordRank node)
    {
        defaultCase(node);
    }

    public void caseTKeywordInitcard(TKeywordInitcard node)
    {
        defaultCase(node);
    }

    public void caseTKeywordGetstatus(TKeywordGetstatus node)
    {
        defaultCase(node);
    }

    public void caseTKeywordIsvalidcombination(TKeywordIsvalidcombination node)
    {
        defaultCase(node);
    }

    public void caseTKeywordIswinnerfound(TKeywordIswinnerfound node)
    {
        defaultCase(node);
    }

    public void caseTKeywordNextturn(TKeywordNextturn node)
    {
        defaultCase(node);
    }

    public void caseTKeywordBefore(TKeywordBefore node)
    {
        defaultCase(node);
    }

    public void caseTKerwordAfter(TKerwordAfter node)
    {
        defaultCase(node);
    }

    public void caseTFuncDrawto(TFuncDrawto node)
    {
        defaultCase(node);
    }

    public void caseTFuncDrawtoall(TFuncDrawtoall node)
    {
        defaultCase(node);
    }

    public void caseTFuncSetcurplayerid(TFuncSetcurplayerid node)
    {
        defaultCase(node);
    }

    public void caseTFuncSetdisplaysize(TFuncSetdisplaysize node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTOpSemi(TOpSemi node)
    {
        defaultCase(node);
    }

    public void caseTOpComma(TOpComma node)
    {
        defaultCase(node);
    }

    public void caseTOpColon(TOpColon node)
    {
        defaultCase(node);
    }

    public void caseTOpPlus(TOpPlus node)
    {
        defaultCase(node);
    }

    public void caseTOpMinus(TOpMinus node)
    {
        defaultCase(node);
    }

    public void caseTOpEqual(TOpEqual node)
    {
        defaultCase(node);
    }

    public void caseTOpSuit(TOpSuit node)
    {
        defaultCase(node);
    }

    public void caseTOpLeftSm(TOpLeftSm node)
    {
        defaultCase(node);
    }

    public void caseTOpRightSm(TOpRightSm node)
    {
        defaultCase(node);
    }

    public void caseTOpLeftMi(TOpLeftMi node)
    {
        defaultCase(node);
    }

    public void caseTOpRightMi(TOpRightMi node)
    {
        defaultCase(node);
    }

    public void caseTOpLeftLg(TOpLeftLg node)
    {
        defaultCase(node);
    }

    public void caseTOpRightLg(TOpRightLg node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseTJavaLiteral(TJavaLiteral node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
