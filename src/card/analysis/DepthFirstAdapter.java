/* This file was generated by SableCC (http://www.sablecc.org/). */

package card.analysis;

import java.util.*;
import card.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getClassDefine() != null)
        {
            node.getClassDefine().apply(this);
        }
        if(node.getAddPattern() != null)
        {
            node.getAddPattern().apply(this);
        }
        if(node.getConfig() != null)
        {
            node.getConfig().apply(this);
        }
        if(node.getInitCard() != null)
        {
            node.getInitCard().apply(this);
        }
        if(node.getGetStatus() != null)
        {
            node.getGetStatus().apply(this);
        }
        if(node.getIsValidCombination() != null)
        {
            node.getIsValidCombination().apply(this);
        }
        if(node.getIsWinnerFound() != null)
        {
            node.getIsWinnerFound().apply(this);
        }
        if(node.getNextTurn() != null)
        {
            node.getNextTurn().apply(this);
        }
        outAProgram(node);
    }

    public void inAClassDefine(AClassDefine node)
    {
        defaultIn(node);
    }

    public void outAClassDefine(AClassDefine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDefine(AClassDefine node)
    {
        inAClassDefine(node);
        if(node.getKeywordClass() != null)
        {
            node.getKeywordClass().apply(this);
        }
        if(node.getOpColon() != null)
        {
            node.getOpColon().apply(this);
        }
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        if(node.getOpSemi() != null)
        {
            node.getOpSemi().apply(this);
        }
        outAClassDefine(node);
    }

    public void inAClassName(AClassName node)
    {
        defaultIn(node);
    }

    public void outAClassName(AClassName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassName(AClassName node)
    {
        inAClassName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAClassName(node);
    }

    public void inAAddPattern(AAddPattern node)
    {
        defaultIn(node);
    }

    public void outAAddPattern(AAddPattern node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddPattern(AAddPattern node)
    {
        inAAddPattern(node);
        if(node.getKeywordAddpattern() != null)
        {
            node.getKeywordAddpattern().apply(this);
        }
        if(node.getOpLeftLg() != null)
        {
            node.getOpLeftLg().apply(this);
        }
        {
            List<PPatternDeclare> copy = new ArrayList<PPatternDeclare>(node.getPatternDeclare());
            for(PPatternDeclare e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getOpRightLg() != null)
        {
            node.getOpRightLg().apply(this);
        }
        outAAddPattern(node);
    }

    public void inAPatternDeclare(APatternDeclare node)
    {
        defaultIn(node);
    }

    public void outAPatternDeclare(APatternDeclare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPatternDeclare(APatternDeclare node)
    {
        inAPatternDeclare(node);
        if(node.getPattern() != null)
        {
            node.getPattern().apply(this);
        }
        if(node.getOpColon() != null)
        {
            node.getOpColon().apply(this);
        }
        if(node.getPatternDeclareCombine() != null)
        {
            node.getPatternDeclareCombine().apply(this);
        }
        if(node.getPatternDeclareCompare() != null)
        {
            node.getPatternDeclareCompare().apply(this);
        }
        if(node.getPatternDeclareOver() != null)
        {
            node.getPatternDeclareOver().apply(this);
        }
        outAPatternDeclare(node);
    }

    public void inAPatternDeclareCombine(APatternDeclareCombine node)
    {
        defaultIn(node);
    }

    public void outAPatternDeclareCombine(APatternDeclareCombine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPatternDeclareCombine(APatternDeclareCombine node)
    {
        inAPatternDeclareCombine(node);
        if(node.getOpLeftSm() != null)
        {
            node.getOpLeftSm().apply(this);
        }
        if(node.getPatternKeyCombine() != null)
        {
            node.getPatternKeyCombine().apply(this);
        }
        if(node.getOpRightSm() != null)
        {
            node.getOpRightSm().apply(this);
        }
        if(node.getOpComma() != null)
        {
            node.getOpComma().apply(this);
        }
        outAPatternDeclareCombine(node);
    }

    public void inAPatternDeclareCompare(APatternDeclareCompare node)
    {
        defaultIn(node);
    }

    public void outAPatternDeclareCompare(APatternDeclareCompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPatternDeclareCompare(APatternDeclareCompare node)
    {
        inAPatternDeclareCompare(node);
        if(node.getOpLeftSm() != null)
        {
            node.getOpLeftSm().apply(this);
        }
        if(node.getPatternCompare() != null)
        {
            node.getPatternCompare().apply(this);
        }
        if(node.getOpRightSm() != null)
        {
            node.getOpRightSm().apply(this);
        }
        if(node.getOpComma() != null)
        {
            node.getOpComma().apply(this);
        }
        outAPatternDeclareCompare(node);
    }

    public void inAPatternDeclareOver(APatternDeclareOver node)
    {
        defaultIn(node);
    }

    public void outAPatternDeclareOver(APatternDeclareOver node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPatternDeclareOver(APatternDeclareOver node)
    {
        inAPatternDeclareOver(node);
        if(node.getOpLeftSm() != null)
        {
            node.getOpLeftSm().apply(this);
        }
        if(node.getPatternOverRule() != null)
        {
            node.getPatternOverRule().apply(this);
        }
        if(node.getOpRightSm() != null)
        {
            node.getOpRightSm().apply(this);
        }
        if(node.getOpSemi() != null)
        {
            node.getOpSemi().apply(this);
        }
        outAPatternDeclareOver(node);
    }

    public void inAPatternKeyCombine(APatternKeyCombine node)
    {
        defaultIn(node);
    }

    public void outAPatternKeyCombine(APatternKeyCombine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPatternKeyCombine(APatternKeyCombine node)
    {
        inAPatternKeyCombine(node);
        if(node.getPatternKey() != null)
        {
            node.getPatternKey().apply(this);
        }
        if(node.getPatternKeyCombineRest() != null)
        {
            node.getPatternKeyCombineRest().apply(this);
        }
        outAPatternKeyCombine(node);
    }

    public void inAEmptyPatternKeyCombineRest(AEmptyPatternKeyCombineRest node)
    {
        defaultIn(node);
    }

    public void outAEmptyPatternKeyCombineRest(AEmptyPatternKeyCombineRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyPatternKeyCombineRest(AEmptyPatternKeyCombineRest node)
    {
        inAEmptyPatternKeyCombineRest(node);
        outAEmptyPatternKeyCombineRest(node);
    }

    public void inANonEmptyPatternKeyCombineRest(ANonEmptyPatternKeyCombineRest node)
    {
        defaultIn(node);
    }

    public void outANonEmptyPatternKeyCombineRest(ANonEmptyPatternKeyCombineRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonEmptyPatternKeyCombineRest(ANonEmptyPatternKeyCombineRest node)
    {
        inANonEmptyPatternKeyCombineRest(node);
        if(node.getOpComma() != null)
        {
            node.getOpComma().apply(this);
        }
        if(node.getPatternKey() != null)
        {
            node.getPatternKey().apply(this);
        }
        if(node.getPatternKeyCombineRest() != null)
        {
            node.getPatternKeyCombineRest().apply(this);
        }
        outANonEmptyPatternKeyCombineRest(node);
    }

    public void inAPatternKey(APatternKey node)
    {
        defaultIn(node);
    }

    public void outAPatternKey(APatternKey node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPatternKey(APatternKey node)
    {
        inAPatternKey(node);
        if(node.getPatternKeyword() != null)
        {
            node.getPatternKeyword().apply(this);
        }
        if(node.getOpLeftMi() != null)
        {
            node.getOpLeftMi().apply(this);
        }
        if(node.getRange() != null)
        {
            node.getRange().apply(this);
        }
        if(node.getOpRightMi() != null)
        {
            node.getOpRightMi().apply(this);
        }
        outAPatternKey(node);
    }

    public void inASamePatternKeyword(ASamePatternKeyword node)
    {
        defaultIn(node);
    }

    public void outASamePatternKeyword(ASamePatternKeyword node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASamePatternKeyword(ASamePatternKeyword node)
    {
        inASamePatternKeyword(node);
        if(node.getKeywordSame() != null)
        {
            node.getKeywordSame().apply(this);
        }
        outASamePatternKeyword(node);
    }

    public void inAStraightPatternKeyword(AStraightPatternKeyword node)
    {
        defaultIn(node);
    }

    public void outAStraightPatternKeyword(AStraightPatternKeyword node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStraightPatternKeyword(AStraightPatternKeyword node)
    {
        inAStraightPatternKeyword(node);
        if(node.getKeywordStraight() != null)
        {
            node.getKeywordStraight().apply(this);
        }
        outAStraightPatternKeyword(node);
    }

    public void inAFlushPatternKeyword(AFlushPatternKeyword node)
    {
        defaultIn(node);
    }

    public void outAFlushPatternKeyword(AFlushPatternKeyword node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFlushPatternKeyword(AFlushPatternKeyword node)
    {
        inAFlushPatternKeyword(node);
        if(node.getKeywordFlush() != null)
        {
            node.getKeywordFlush().apply(this);
        }
        outAFlushPatternKeyword(node);
    }

    public void inASingleRange(ASingleRange node)
    {
        defaultIn(node);
    }

    public void outASingleRange(ASingleRange node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleRange(ASingleRange node)
    {
        inASingleRange(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outASingleRange(node);
    }

    public void inAMultiRange(AMultiRange node)
    {
        defaultIn(node);
    }

    public void outAMultiRange(AMultiRange node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiRange(AMultiRange node)
    {
        inAMultiRange(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getRangeRest() != null)
        {
            node.getRangeRest().apply(this);
        }
        outAMultiRange(node);
    }

    public void inARangeRest(ARangeRest node)
    {
        defaultIn(node);
    }

    public void outARangeRest(ARangeRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARangeRest(ARangeRest node)
    {
        inARangeRest(node);
        if(node.getOpMinus() != null)
        {
            node.getOpMinus().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outARangeRest(node);
    }

    public void inAPatternCompare(APatternCompare node)
    {
        defaultIn(node);
    }

    public void outAPatternCompare(APatternCompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPatternCompare(APatternCompare node)
    {
        inAPatternCompare(node);
        if(node.getCompareRule() != null)
        {
            node.getCompareRule().apply(this);
        }
        if(node.getCompareRest() != null)
        {
            node.getCompareRest().apply(this);
        }
        outAPatternCompare(node);
    }

    public void inAEmptyCompareRest(AEmptyCompareRest node)
    {
        defaultIn(node);
    }

    public void outAEmptyCompareRest(AEmptyCompareRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyCompareRest(AEmptyCompareRest node)
    {
        inAEmptyCompareRest(node);
        outAEmptyCompareRest(node);
    }

    public void inAMultiCompareRest(AMultiCompareRest node)
    {
        defaultIn(node);
    }

    public void outAMultiCompareRest(AMultiCompareRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiCompareRest(AMultiCompareRest node)
    {
        inAMultiCompareRest(node);
        if(node.getOpComma() != null)
        {
            node.getOpComma().apply(this);
        }
        if(node.getCompareRule() != null)
        {
            node.getCompareRule().apply(this);
        }
        if(node.getCompareRest() != null)
        {
            node.getCompareRest().apply(this);
        }
        outAMultiCompareRest(node);
    }

    public void inABigCompareRule(ABigCompareRule node)
    {
        defaultIn(node);
    }

    public void outABigCompareRule(ABigCompareRule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABigCompareRule(ABigCompareRule node)
    {
        inABigCompareRule(node);
        if(node.getOpPlus() != null)
        {
            node.getOpPlus().apply(this);
        }
        outABigCompareRule(node);
    }

    public void inASmallCompareRule(ASmallCompareRule node)
    {
        defaultIn(node);
    }

    public void outASmallCompareRule(ASmallCompareRule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASmallCompareRule(ASmallCompareRule node)
    {
        inASmallCompareRule(node);
        if(node.getOpMinus() != null)
        {
            node.getOpMinus().apply(this);
        }
        outASmallCompareRule(node);
    }

    public void inAEqualCompareRule(AEqualCompareRule node)
    {
        defaultIn(node);
    }

    public void outAEqualCompareRule(AEqualCompareRule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualCompareRule(AEqualCompareRule node)
    {
        inAEqualCompareRule(node);
        if(node.getOpEqual() != null)
        {
            node.getOpEqual().apply(this);
        }
        outAEqualCompareRule(node);
    }

    public void inASuitCompareRule(ASuitCompareRule node)
    {
        defaultIn(node);
    }

    public void outASuitCompareRule(ASuitCompareRule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuitCompareRule(ASuitCompareRule node)
    {
        inASuitCompareRule(node);
        if(node.getOpSuit() != null)
        {
            node.getOpSuit().apply(this);
        }
        outASuitCompareRule(node);
    }

    public void inAEmptyPatternOverRule(AEmptyPatternOverRule node)
    {
        defaultIn(node);
    }

    public void outAEmptyPatternOverRule(AEmptyPatternOverRule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyPatternOverRule(AEmptyPatternOverRule node)
    {
        inAEmptyPatternOverRule(node);
        outAEmptyPatternOverRule(node);
    }

    public void inARestPatternOverRule(ARestPatternOverRule node)
    {
        defaultIn(node);
    }

    public void outARestPatternOverRule(ARestPatternOverRule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestPatternOverRule(ARestPatternOverRule node)
    {
        inARestPatternOverRule(node);
        if(node.getPattern() != null)
        {
            node.getPattern().apply(this);
        }
        if(node.getPatternOverRest() != null)
        {
            node.getPatternOverRest().apply(this);
        }
        outARestPatternOverRule(node);
    }

    public void inAEmptyPatternOverRest(AEmptyPatternOverRest node)
    {
        defaultIn(node);
    }

    public void outAEmptyPatternOverRest(AEmptyPatternOverRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyPatternOverRest(AEmptyPatternOverRest node)
    {
        inAEmptyPatternOverRest(node);
        outAEmptyPatternOverRest(node);
    }

    public void inARestPatternOverRest(ARestPatternOverRest node)
    {
        defaultIn(node);
    }

    public void outARestPatternOverRest(ARestPatternOverRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestPatternOverRest(ARestPatternOverRest node)
    {
        inARestPatternOverRest(node);
        if(node.getOpComma() != null)
        {
            node.getOpComma().apply(this);
        }
        if(node.getPattern() != null)
        {
            node.getPattern().apply(this);
        }
        if(node.getPatternOverRest() != null)
        {
            node.getPatternOverRest().apply(this);
        }
        outARestPatternOverRest(node);
    }

    public void inAPattern(APattern node)
    {
        defaultIn(node);
    }

    public void outAPattern(APattern node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPattern(APattern node)
    {
        inAPattern(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAPattern(node);
    }

    public void inAConfig(AConfig node)
    {
        defaultIn(node);
    }

    public void outAConfig(AConfig node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConfig(AConfig node)
    {
        inAConfig(node);
        if(node.getKeywordConfig() != null)
        {
            node.getKeywordConfig().apply(this);
        }
        if(node.getOpLeftLg() != null)
        {
            node.getOpLeftLg().apply(this);
        }
        {
            List<PConfigStmt> copy = new ArrayList<PConfigStmt>(node.getConfigStmt());
            for(PConfigStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getOpRightLg() != null)
        {
            node.getOpRightLg().apply(this);
        }
        outAConfig(node);
    }

    public void inAConfigStmt(AConfigStmt node)
    {
        defaultIn(node);
    }

    public void outAConfigStmt(AConfigStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConfigStmt(AConfigStmt node)
    {
        inAConfigStmt(node);
        if(node.getConfigKeyword() != null)
        {
            node.getConfigKeyword().apply(this);
        }
        if(node.getOpColon() != null)
        {
            node.getOpColon().apply(this);
        }
        if(node.getConfigValue() != null)
        {
            node.getConfigValue().apply(this);
        }
        if(node.getOpSemi() != null)
        {
            node.getOpSemi().apply(this);
        }
        outAConfigStmt(node);
    }

    public void inAWinConfigKeyword(AWinConfigKeyword node)
    {
        defaultIn(node);
    }

    public void outAWinConfigKeyword(AWinConfigKeyword node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWinConfigKeyword(AWinConfigKeyword node)
    {
        inAWinConfigKeyword(node);
        if(node.getKeywordWin() != null)
        {
            node.getKeywordWin().apply(this);
        }
        outAWinConfigKeyword(node);
    }

    public void inASystempairConfigKeyword(ASystempairConfigKeyword node)
    {
        defaultIn(node);
    }

    public void outASystempairConfigKeyword(ASystempairConfigKeyword node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASystempairConfigKeyword(ASystempairConfigKeyword node)
    {
        inASystempairConfigKeyword(node);
        if(node.getKeywordSystem() != null)
        {
            node.getKeywordSystem().apply(this);
        }
        outASystempairConfigKeyword(node);
    }

    public void inASelfreplaceConfigKeyword(ASelfreplaceConfigKeyword node)
    {
        defaultIn(node);
    }

    public void outASelfreplaceConfigKeyword(ASelfreplaceConfigKeyword node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelfreplaceConfigKeyword(ASelfreplaceConfigKeyword node)
    {
        inASelfreplaceConfigKeyword(node);
        if(node.getKeywordSelfreplace() != null)
        {
            node.getKeywordSelfreplace().apply(this);
        }
        outASelfreplaceConfigKeyword(node);
    }

    public void inANextConfigKeyword(ANextConfigKeyword node)
    {
        defaultIn(node);
    }

    public void outANextConfigKeyword(ANextConfigKeyword node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextConfigKeyword(ANextConfigKeyword node)
    {
        inANextConfigKeyword(node);
        if(node.getKeywordNext() != null)
        {
            node.getKeywordNext().apply(this);
        }
        outANextConfigKeyword(node);
    }

    public void inADefaultstatusConfigKeyword(ADefaultstatusConfigKeyword node)
    {
        defaultIn(node);
    }

    public void outADefaultstatusConfigKeyword(ADefaultstatusConfigKeyword node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultstatusConfigKeyword(ADefaultstatusConfigKeyword node)
    {
        inADefaultstatusConfigKeyword(node);
        if(node.getKeywordDefaultstatus() != null)
        {
            node.getKeywordDefaultstatus().apply(this);
        }
        outADefaultstatusConfigKeyword(node);
    }

    public void inARankConfigKeyword(ARankConfigKeyword node)
    {
        defaultIn(node);
    }

    public void outARankConfigKeyword(ARankConfigKeyword node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARankConfigKeyword(ARankConfigKeyword node)
    {
        inARankConfigKeyword(node);
        if(node.getKeywordRank() != null)
        {
            node.getKeywordRank().apply(this);
        }
        outARankConfigKeyword(node);
    }

    public void inAWinValueConfigValue(AWinValueConfigValue node)
    {
        defaultIn(node);
    }

    public void outAWinValueConfigValue(AWinValueConfigValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWinValueConfigValue(AWinValueConfigValue node)
    {
        inAWinValueConfigValue(node);
        if(node.getWinValue() != null)
        {
            node.getWinValue().apply(this);
        }
        outAWinValueConfigValue(node);
    }

    public void inABooleanConfigValue(ABooleanConfigValue node)
    {
        defaultIn(node);
    }

    public void outABooleanConfigValue(ABooleanConfigValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanConfigValue(ABooleanConfigValue node)
    {
        inABooleanConfigValue(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanConfigValue(node);
    }

    public void inANumberConfigValue(ANumberConfigValue node)
    {
        defaultIn(node);
    }

    public void outANumberConfigValue(ANumberConfigValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberConfigValue(ANumberConfigValue node)
    {
        inANumberConfigValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberConfigValue(node);
    }

    public void inARankNameConfigValue(ARankNameConfigValue node)
    {
        defaultIn(node);
    }

    public void outARankNameConfigValue(ARankNameConfigValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARankNameConfigValue(ARankNameConfigValue node)
    {
        inARankNameConfigValue(node);
        if(node.getRankName() != null)
        {
            node.getRankName().apply(this);
        }
        outARankNameConfigValue(node);
    }

    public void inAWinValue(AWinValue node)
    {
        defaultIn(node);
    }

    public void outAWinValue(AWinValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWinValue(AWinValue node)
    {
        inAWinValue(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAWinValue(node);
    }

    public void inATrueBoolean(ATrueBoolean node)
    {
        defaultIn(node);
    }

    public void outATrueBoolean(ATrueBoolean node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBoolean(ATrueBoolean node)
    {
        inATrueBoolean(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outATrueBoolean(node);
    }

    public void inAFalseBoolean(AFalseBoolean node)
    {
        defaultIn(node);
    }

    public void outAFalseBoolean(AFalseBoolean node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBoolean(AFalseBoolean node)
    {
        inAFalseBoolean(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAFalseBoolean(node);
    }

    public void inARankName(ARankName node)
    {
        defaultIn(node);
    }

    public void outARankName(ARankName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARankName(ARankName node)
    {
        inARankName(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outARankName(node);
    }

    public void inABeforeValidStmt(ABeforeValidStmt node)
    {
        defaultIn(node);
    }

    public void outABeforeValidStmt(ABeforeValidStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABeforeValidStmt(ABeforeValidStmt node)
    {
        inABeforeValidStmt(node);
        if(node.getBeforStmt() != null)
        {
            node.getBeforStmt().apply(this);
        }
        outABeforeValidStmt(node);
    }

    public void inAAfterValidStmt(AAfterValidStmt node)
    {
        defaultIn(node);
    }

    public void outAAfterValidStmt(AAfterValidStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAfterValidStmt(AAfterValidStmt node)
    {
        inAAfterValidStmt(node);
        if(node.getAfterStmt() != null)
        {
            node.getAfterStmt().apply(this);
        }
        outAAfterValidStmt(node);
    }

    public void inAEmptyBeforStmt(AEmptyBeforStmt node)
    {
        defaultIn(node);
    }

    public void outAEmptyBeforStmt(AEmptyBeforStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyBeforStmt(AEmptyBeforStmt node)
    {
        inAEmptyBeforStmt(node);
        outAEmptyBeforStmt(node);
    }

    public void inABeforeBeforStmt(ABeforeBeforStmt node)
    {
        defaultIn(node);
    }

    public void outABeforeBeforStmt(ABeforeBeforStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABeforeBeforStmt(ABeforeBeforStmt node)
    {
        inABeforeBeforStmt(node);
        if(node.getKeywordBefore() != null)
        {
            node.getKeywordBefore().apply(this);
        }
        if(node.getOpLeftLg() != null)
        {
            node.getOpLeftLg().apply(this);
        }
        if(node.getJavaLiteral() != null)
        {
            node.getJavaLiteral().apply(this);
        }
        if(node.getOpRightLg() != null)
        {
            node.getOpRightLg().apply(this);
        }
        outABeforeBeforStmt(node);
    }

    public void inAEmptyAfterStmt(AEmptyAfterStmt node)
    {
        defaultIn(node);
    }

    public void outAEmptyAfterStmt(AEmptyAfterStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyAfterStmt(AEmptyAfterStmt node)
    {
        inAEmptyAfterStmt(node);
        outAEmptyAfterStmt(node);
    }

    public void inAAfterAfterStmt(AAfterAfterStmt node)
    {
        defaultIn(node);
    }

    public void outAAfterAfterStmt(AAfterAfterStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAfterAfterStmt(AAfterAfterStmt node)
    {
        inAAfterAfterStmt(node);
        if(node.getKerwordAfter() != null)
        {
            node.getKerwordAfter().apply(this);
        }
        if(node.getOpLeftLg() != null)
        {
            node.getOpLeftLg().apply(this);
        }
        if(node.getJavaLiteral() != null)
        {
            node.getJavaLiteral().apply(this);
        }
        if(node.getOpRightLg() != null)
        {
            node.getOpRightLg().apply(this);
        }
        outAAfterAfterStmt(node);
    }

    public void inAInitCard(AInitCard node)
    {
        defaultIn(node);
    }

    public void outAInitCard(AInitCard node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitCard(AInitCard node)
    {
        inAInitCard(node);
        if(node.getKeywordInitcard() != null)
        {
            node.getKeywordInitcard().apply(this);
        }
        if(node.getOpLeftSm() != null)
        {
            node.getOpLeftSm().apply(this);
        }
        if(node.getInitPlayer() != null)
        {
            node.getInitPlayer().apply(this);
        }
        if(node.getOpRightSm() != null)
        {
            node.getOpRightSm().apply(this);
        }
        if(node.getOpLeftLg() != null)
        {
            node.getOpLeftLg().apply(this);
        }
        if(node.getInitCardStmt() != null)
        {
            node.getInitCardStmt().apply(this);
        }
        if(node.getOpRightLg() != null)
        {
            node.getOpRightLg().apply(this);
        }
        outAInitCard(node);
    }

    public void inAInitPlayer(AInitPlayer node)
    {
        defaultIn(node);
    }

    public void outAInitPlayer(AInitPlayer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitPlayer(AInitPlayer node)
    {
        inAInitPlayer(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAInitPlayer(node);
    }

    public void inAInitCardStmt(AInitCardStmt node)
    {
        defaultIn(node);
    }

    public void outAInitCardStmt(AInitCardStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitCardStmt(AInitCardStmt node)
    {
        inAInitCardStmt(node);
        if(node.getInitStmt() != null)
        {
            node.getInitStmt().apply(this);
        }
        if(node.getInitStmtRest() != null)
        {
            node.getInitStmtRest().apply(this);
        }
        outAInitCardStmt(node);
    }

    public void inAEmptyInitStmtRest(AEmptyInitStmtRest node)
    {
        defaultIn(node);
    }

    public void outAEmptyInitStmtRest(AEmptyInitStmtRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyInitStmtRest(AEmptyInitStmtRest node)
    {
        inAEmptyInitStmtRest(node);
        outAEmptyInitStmtRest(node);
    }

    public void inARestInitStmtRest(ARestInitStmtRest node)
    {
        defaultIn(node);
    }

    public void outARestInitStmtRest(ARestInitStmtRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestInitStmtRest(ARestInitStmtRest node)
    {
        inARestInitStmtRest(node);
        if(node.getInitStmt() != null)
        {
            node.getInitStmt().apply(this);
        }
        if(node.getInitStmtRest() != null)
        {
            node.getInitStmtRest().apply(this);
        }
        outARestInitStmtRest(node);
    }

    public void inAInitStmt(AInitStmt node)
    {
        defaultIn(node);
    }

    public void outAInitStmt(AInitStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitStmt(AInitStmt node)
    {
        inAInitStmt(node);
        if(node.getFuncStmt() != null)
        {
            node.getFuncStmt().apply(this);
        }
        outAInitStmt(node);
    }

    public void inAFuncStmt(AFuncStmt node)
    {
        defaultIn(node);
    }

    public void outAFuncStmt(AFuncStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncStmt(AFuncStmt node)
    {
        inAFuncStmt(node);
        if(node.getFuncKeyword() != null)
        {
            node.getFuncKeyword().apply(this);
        }
        if(node.getOpLeftSm() != null)
        {
            node.getOpLeftSm().apply(this);
        }
        if(node.getFuncPara() != null)
        {
            node.getFuncPara().apply(this);
        }
        if(node.getOpRightSm() != null)
        {
            node.getOpRightSm().apply(this);
        }
        if(node.getOpSemi() != null)
        {
            node.getOpSemi().apply(this);
        }
        outAFuncStmt(node);
    }

    public void inADrawtoFuncKeyword(ADrawtoFuncKeyword node)
    {
        defaultIn(node);
    }

    public void outADrawtoFuncKeyword(ADrawtoFuncKeyword node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADrawtoFuncKeyword(ADrawtoFuncKeyword node)
    {
        inADrawtoFuncKeyword(node);
        if(node.getFuncDrawto() != null)
        {
            node.getFuncDrawto().apply(this);
        }
        outADrawtoFuncKeyword(node);
    }

    public void inADrawtoallFuncKeyword(ADrawtoallFuncKeyword node)
    {
        defaultIn(node);
    }

    public void outADrawtoallFuncKeyword(ADrawtoallFuncKeyword node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADrawtoallFuncKeyword(ADrawtoallFuncKeyword node)
    {
        inADrawtoallFuncKeyword(node);
        if(node.getFuncDrawtoall() != null)
        {
            node.getFuncDrawtoall().apply(this);
        }
        outADrawtoallFuncKeyword(node);
    }

    public void inASetcurplayeridFuncKeyword(ASetcurplayeridFuncKeyword node)
    {
        defaultIn(node);
    }

    public void outASetcurplayeridFuncKeyword(ASetcurplayeridFuncKeyword node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetcurplayeridFuncKeyword(ASetcurplayeridFuncKeyword node)
    {
        inASetcurplayeridFuncKeyword(node);
        if(node.getFuncSetcurplayerid() != null)
        {
            node.getFuncSetcurplayerid().apply(this);
        }
        outASetcurplayeridFuncKeyword(node);
    }

    public void inASetdisplaysizeFuncKeyword(ASetdisplaysizeFuncKeyword node)
    {
        defaultIn(node);
    }

    public void outASetdisplaysizeFuncKeyword(ASetdisplaysizeFuncKeyword node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetdisplaysizeFuncKeyword(ASetdisplaysizeFuncKeyword node)
    {
        inASetdisplaysizeFuncKeyword(node);
        if(node.getFuncSetdisplaysize() != null)
        {
            node.getFuncSetdisplaysize().apply(this);
        }
        outASetdisplaysizeFuncKeyword(node);
    }

    public void inAEmptyFuncPara(AEmptyFuncPara node)
    {
        defaultIn(node);
    }

    public void outAEmptyFuncPara(AEmptyFuncPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyFuncPara(AEmptyFuncPara node)
    {
        inAEmptyFuncPara(node);
        outAEmptyFuncPara(node);
    }

    public void inANoEmptyFuncPara(ANoEmptyFuncPara node)
    {
        defaultIn(node);
    }

    public void outANoEmptyFuncPara(ANoEmptyFuncPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoEmptyFuncPara(ANoEmptyFuncPara node)
    {
        inANoEmptyFuncPara(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getFuncParaRest() != null)
        {
            node.getFuncParaRest().apply(this);
        }
        outANoEmptyFuncPara(node);
    }

    public void inAEmptyFuncParaRest(AEmptyFuncParaRest node)
    {
        defaultIn(node);
    }

    public void outAEmptyFuncParaRest(AEmptyFuncParaRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyFuncParaRest(AEmptyFuncParaRest node)
    {
        inAEmptyFuncParaRest(node);
        outAEmptyFuncParaRest(node);
    }

    public void inANoEmptyFuncParaRest(ANoEmptyFuncParaRest node)
    {
        defaultIn(node);
    }

    public void outANoEmptyFuncParaRest(ANoEmptyFuncParaRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoEmptyFuncParaRest(ANoEmptyFuncParaRest node)
    {
        inANoEmptyFuncParaRest(node);
        if(node.getOpComma() != null)
        {
            node.getOpComma().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getFuncParaRest() != null)
        {
            node.getFuncParaRest().apply(this);
        }
        outANoEmptyFuncParaRest(node);
    }

    public void inANumberPara(ANumberPara node)
    {
        defaultIn(node);
    }

    public void outANumberPara(ANumberPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberPara(ANumberPara node)
    {
        inANumberPara(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberPara(node);
    }

    public void inAIdPara(AIdPara node)
    {
        defaultIn(node);
    }

    public void outAIdPara(AIdPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdPara(AIdPara node)
    {
        inAIdPara(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdPara(node);
    }

    public void inAGetStatus(AGetStatus node)
    {
        defaultIn(node);
    }

    public void outAGetStatus(AGetStatus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGetStatus(AGetStatus node)
    {
        inAGetStatus(node);
        if(node.getKeywordGetstatus() != null)
        {
            node.getKeywordGetstatus().apply(this);
        }
        if(node.getOpLeftSm() != null)
        {
            node.getOpLeftSm().apply(this);
        }
        if(node.getOpRightSm() != null)
        {
            node.getOpRightSm().apply(this);
        }
        if(node.getOpLeftLg() != null)
        {
            node.getOpLeftLg().apply(this);
        }
        if(node.getOpRightLg() != null)
        {
            node.getOpRightLg().apply(this);
        }
        outAGetStatus(node);
    }

    public void inAIsValidCombination(AIsValidCombination node)
    {
        defaultIn(node);
    }

    public void outAIsValidCombination(AIsValidCombination node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIsValidCombination(AIsValidCombination node)
    {
        inAIsValidCombination(node);
        if(node.getKeywordIsvalidcombination() != null)
        {
            node.getKeywordIsvalidcombination().apply(this);
        }
        if(node.getOpLeftSm() != null)
        {
            node.getOpLeftSm().apply(this);
        }
        if(node.getCardSelected() != null)
        {
            node.getCardSelected().apply(this);
        }
        if(node.getOpRightSm() != null)
        {
            node.getOpRightSm().apply(this);
        }
        if(node.getOpLeftLg() != null)
        {
            node.getOpLeftLg().apply(this);
        }
        if(node.getValidStmt() != null)
        {
            node.getValidStmt().apply(this);
        }
        if(node.getOpRightLg() != null)
        {
            node.getOpRightLg().apply(this);
        }
        outAIsValidCombination(node);
    }

    public void inACardSelected(ACardSelected node)
    {
        defaultIn(node);
    }

    public void outACardSelected(ACardSelected node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACardSelected(ACardSelected node)
    {
        inACardSelected(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outACardSelected(node);
    }

    public void inAIsWinnerFound(AIsWinnerFound node)
    {
        defaultIn(node);
    }

    public void outAIsWinnerFound(AIsWinnerFound node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIsWinnerFound(AIsWinnerFound node)
    {
        inAIsWinnerFound(node);
        if(node.getKeywordIswinnerfound() != null)
        {
            node.getKeywordIswinnerfound().apply(this);
        }
        if(node.getOpLeftSm() != null)
        {
            node.getOpLeftSm().apply(this);
        }
        if(node.getValidStmt() != null)
        {
            node.getValidStmt().apply(this);
        }
        if(node.getOpRightSm() != null)
        {
            node.getOpRightSm().apply(this);
        }
        if(node.getOpLeftLg() != null)
        {
            node.getOpLeftLg().apply(this);
        }
        if(node.getOpRightLg() != null)
        {
            node.getOpRightLg().apply(this);
        }
        outAIsWinnerFound(node);
    }

    public void inANextTurn(ANextTurn node)
    {
        defaultIn(node);
    }

    public void outANextTurn(ANextTurn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextTurn(ANextTurn node)
    {
        inANextTurn(node);
        if(node.getKeywordNextturn() != null)
        {
            node.getKeywordNextturn().apply(this);
        }
        if(node.getOpLeftSm() != null)
        {
            node.getOpLeftSm().apply(this);
        }
        if(node.getOpRightSm() != null)
        {
            node.getOpRightSm().apply(this);
        }
        if(node.getOpLeftLg() != null)
        {
            node.getOpLeftLg().apply(this);
        }
        if(node.getValidStmt() != null)
        {
            node.getValidStmt().apply(this);
        }
        if(node.getOpRightLg() != null)
        {
            node.getOpRightLg().apply(this);
        }
        outANextTurn(node);
    }
}
