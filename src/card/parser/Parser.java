/* This file was generated by SableCC (http://www.sablecc.org/). */

package card.parser;

import card.lexer.*;
import card.node.*;
import card.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AClassDefine */
		    {
			ArrayList list = new1();
			push(goTo(1), list);
		    }
		    break;
                    case 2: /* reduce AClassName */
		    {
			ArrayList list = new2();
			push(goTo(2), list);
		    }
		    break;
                    case 3: /* reduce AAddPattern */
		    {
			ArrayList list = new3();
			push(goTo(3), list);
		    }
		    break;
                    case 4: /* reduce APatternDeclare */
		    {
			ArrayList list = new4();
			push(goTo(4), list);
		    }
		    break;
                    case 5: /* reduce APatternDeclareCombine */
		    {
			ArrayList list = new5();
			push(goTo(5), list);
		    }
		    break;
                    case 6: /* reduce APatternDeclareCompare */
		    {
			ArrayList list = new6();
			push(goTo(6), list);
		    }
		    break;
                    case 7: /* reduce APatternDeclareOver */
		    {
			ArrayList list = new7();
			push(goTo(7), list);
		    }
		    break;
                    case 8: /* reduce APatternKeyCombine */
		    {
			ArrayList list = new8();
			push(goTo(8), list);
		    }
		    break;
                    case 9: /* reduce AEmptyPatternKeyCombineRest */
		    {
			ArrayList list = new9();
			push(goTo(9), list);
		    }
		    break;
                    case 10: /* reduce ANonEmptyPatternKeyCombineRest */
		    {
			ArrayList list = new10();
			push(goTo(9), list);
		    }
		    break;
                    case 11: /* reduce APatternKey */
		    {
			ArrayList list = new11();
			push(goTo(10), list);
		    }
		    break;
                    case 12: /* reduce ASamePatternKeyword */
		    {
			ArrayList list = new12();
			push(goTo(11), list);
		    }
		    break;
                    case 13: /* reduce AStraightPatternKeyword */
		    {
			ArrayList list = new13();
			push(goTo(11), list);
		    }
		    break;
                    case 14: /* reduce AFlushPatternKeyword */
		    {
			ArrayList list = new14();
			push(goTo(11), list);
		    }
		    break;
                    case 15: /* reduce ASingleRange */
		    {
			ArrayList list = new15();
			push(goTo(12), list);
		    }
		    break;
                    case 16: /* reduce AMultiRange */
		    {
			ArrayList list = new16();
			push(goTo(12), list);
		    }
		    break;
                    case 17: /* reduce ARangeRest */
		    {
			ArrayList list = new17();
			push(goTo(13), list);
		    }
		    break;
                    case 18: /* reduce APatternCompare */
		    {
			ArrayList list = new18();
			push(goTo(14), list);
		    }
		    break;
                    case 19: /* reduce AEmptyCompareRest */
		    {
			ArrayList list = new19();
			push(goTo(15), list);
		    }
		    break;
                    case 20: /* reduce AMultiCompareRest */
		    {
			ArrayList list = new20();
			push(goTo(15), list);
		    }
		    break;
                    case 21: /* reduce ABigCompareRule */
		    {
			ArrayList list = new21();
			push(goTo(16), list);
		    }
		    break;
                    case 22: /* reduce ASmallCompareRule */
		    {
			ArrayList list = new22();
			push(goTo(16), list);
		    }
		    break;
                    case 23: /* reduce AEqualCompareRule */
		    {
			ArrayList list = new23();
			push(goTo(16), list);
		    }
		    break;
                    case 24: /* reduce ASuitCompareRule */
		    {
			ArrayList list = new24();
			push(goTo(16), list);
		    }
		    break;
                    case 25: /* reduce AEmptyPatternOverRule */
		    {
			ArrayList list = new25();
			push(goTo(17), list);
		    }
		    break;
                    case 26: /* reduce ARestPatternOverRule */
		    {
			ArrayList list = new26();
			push(goTo(17), list);
		    }
		    break;
                    case 27: /* reduce AEmptyPatternOverRest */
		    {
			ArrayList list = new27();
			push(goTo(18), list);
		    }
		    break;
                    case 28: /* reduce ARestPatternOverRest */
		    {
			ArrayList list = new28();
			push(goTo(18), list);
		    }
		    break;
                    case 29: /* reduce APattern */
		    {
			ArrayList list = new29();
			push(goTo(19), list);
		    }
		    break;
                    case 30: /* reduce AConfig */
		    {
			ArrayList list = new30();
			push(goTo(20), list);
		    }
		    break;
                    case 31: /* reduce ANumber1ConfigStmt */
		    {
			ArrayList list = new31();
			push(goTo(21), list);
		    }
		    break;
                    case 32: /* reduce ARankName1$1ConfigStmt */
		    {
			ArrayList list = new32();
			push(goTo(21), list);
		    }
		    break;
                    case 33: /* reduce AWinConfigKeyword */
		    {
			ArrayList list = new33();
			push(goTo(22), list);
		    }
		    break;
                    case 34: /* reduce ASystempairConfigKeyword */
		    {
			ArrayList list = new34();
			push(goTo(22), list);
		    }
		    break;
                    case 35: /* reduce ASelfreplaceConfigKeyword */
		    {
			ArrayList list = new35();
			push(goTo(22), list);
		    }
		    break;
                    case 36: /* reduce ANextConfigKeyword */
		    {
			ArrayList list = new36();
			push(goTo(22), list);
		    }
		    break;
                    case 37: /* reduce ADefaultstatusConfigKeyword */
		    {
			ArrayList list = new37();
			push(goTo(22), list);
		    }
		    break;
                    case 38: /* reduce ARankConfigKeyword */
		    {
			ArrayList list = new38();
			push(goTo(22), list);
		    }
		    break;
                    case 39: /* reduce ABefore$Before1ValidStmt */
		    {
			ArrayList list = new39();
			push(goTo(23), list);
		    }
		    break;
                    case 40: /* reduce AAfter$Empty1ValidStmt */
		    {
			ArrayList list = new40();
			push(goTo(23), list);
		    }
		    break;
                    case 41: /* reduce AAfter$After1ValidStmt */
		    {
			ArrayList list = new41();
			push(goTo(23), list);
		    }
		    break;
                    case 42: /* reduce AInitCard */
		    {
			ArrayList list = new42();
			push(goTo(24), list);
		    }
		    break;
                    case 43: /* reduce AInitPlayer */
		    {
			ArrayList list = new43();
			push(goTo(25), list);
		    }
		    break;
                    case 44: /* reduce AInitCardStmt */
		    {
			ArrayList list = new44();
			push(goTo(26), list);
		    }
		    break;
                    case 45: /* reduce AEmptyInitStmtRest */
		    {
			ArrayList list = new45();
			push(goTo(27), list);
		    }
		    break;
                    case 46: /* reduce ARestInitStmtRest */
		    {
			ArrayList list = new46();
			push(goTo(27), list);
		    }
		    break;
                    case 47: /* reduce AInitStmt */
		    {
			ArrayList list = new47();
			push(goTo(28), list);
		    }
		    break;
                    case 48: /* reduce AFuncStmt */
		    {
			ArrayList list = new48();
			push(goTo(29), list);
		    }
		    break;
                    case 49: /* reduce ADrawtoFuncKeyword */
		    {
			ArrayList list = new49();
			push(goTo(30), list);
		    }
		    break;
                    case 50: /* reduce ADrawtoallFuncKeyword */
		    {
			ArrayList list = new50();
			push(goTo(30), list);
		    }
		    break;
                    case 51: /* reduce ASetcurplayeridFuncKeyword */
		    {
			ArrayList list = new51();
			push(goTo(30), list);
		    }
		    break;
                    case 52: /* reduce ASetdisplaysizeFuncKeyword */
		    {
			ArrayList list = new52();
			push(goTo(30), list);
		    }
		    break;
                    case 53: /* reduce AEmptyFuncPara */
		    {
			ArrayList list = new53();
			push(goTo(31), list);
		    }
		    break;
                    case 54: /* reduce ANoEmptyFuncPara */
		    {
			ArrayList list = new54();
			push(goTo(31), list);
		    }
		    break;
                    case 55: /* reduce AEmptyFuncParaRest */
		    {
			ArrayList list = new55();
			push(goTo(32), list);
		    }
		    break;
                    case 56: /* reduce ANoEmptyFuncParaRest */
		    {
			ArrayList list = new56();
			push(goTo(32), list);
		    }
		    break;
                    case 57: /* reduce ANumberPara */
		    {
			ArrayList list = new57();
			push(goTo(33), list);
		    }
		    break;
                    case 58: /* reduce AIdPara */
		    {
			ArrayList list = new58();
			push(goTo(33), list);
		    }
		    break;
                    case 59: /* reduce AGetStatus */
		    {
			ArrayList list = new59();
			push(goTo(34), list);
		    }
		    break;
                    case 60: /* reduce AIsValidCombination */
		    {
			ArrayList list = new60();
			push(goTo(35), list);
		    }
		    break;
                    case 61: /* reduce ACardSelected */
		    {
			ArrayList list = new61();
			push(goTo(36), list);
		    }
		    break;
                    case 62: /* reduce AIsWinnerFound */
		    {
			ArrayList list = new62();
			push(goTo(37), list);
		    }
		    break;
                    case 63: /* reduce ANextTurn */
		    {
			ArrayList list = new63();
			push(goTo(38), list);
		    }
		    break;
                    case 64: /* reduce ATerminal$PatternDeclare */
		    {
			ArrayList list = new64();
			push(goTo(39), list);
		    }
		    break;
                    case 65: /* reduce ANonTerminal$PatternDeclare */
		    {
			ArrayList list = new65();
			push(goTo(39), list);
		    }
		    break;
                    case 66: /* reduce ATerminal$ConfigStmt */
		    {
			ArrayList list = new66();
			push(goTo(40), list);
		    }
		    break;
                    case 67: /* reduce ANonTerminal$ConfigStmt */
		    {
			ArrayList list = new67();
			push(goTo(40), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PClassDefine pclassdefineNode2;
        PAddPattern paddpatternNode3;
        PConfig pconfigNode4;
        PInitCard pinitcardNode5;
        PGetStatus pgetstatusNode6;
        PIsValidCombination pisvalidcombinationNode7;
        PIsWinnerFound piswinnerfoundNode8;
        PNextTurn pnextturnNode9;
        pclassdefineNode2 = (PClassDefine)nodeArrayList1.get(0);
        paddpatternNode3 = (PAddPattern)nodeArrayList2.get(0);
        pconfigNode4 = (PConfig)nodeArrayList3.get(0);
        pinitcardNode5 = (PInitCard)nodeArrayList4.get(0);
        pgetstatusNode6 = (PGetStatus)nodeArrayList5.get(0);
        pisvalidcombinationNode7 = (PIsValidCombination)nodeArrayList6.get(0);
        piswinnerfoundNode8 = (PIsWinnerFound)nodeArrayList7.get(0);
        pnextturnNode9 = (PNextTurn)nodeArrayList8.get(0);

        pprogramNode1 = new AProgram(pclassdefineNode2, paddpatternNode3, pconfigNode4, pinitcardNode5, pgetstatusNode6, pisvalidcombinationNode7, piswinnerfoundNode8, pnextturnNode9);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AClassDefine */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDefine pclassdefineNode1;
        {
            // Block
        TKeywordClass tkeywordclassNode2;
        TOpColon topcolonNode3;
        PClassName pclassnameNode4;
        TOpSemi topsemiNode5;
        tkeywordclassNode2 = (TKeywordClass)nodeArrayList1.get(0);
        topcolonNode3 = (TOpColon)nodeArrayList2.get(0);
        pclassnameNode4 = (PClassName)nodeArrayList3.get(0);
        topsemiNode5 = (TOpSemi)nodeArrayList4.get(0);

        pclassdefineNode1 = new AClassDefine(tkeywordclassNode2, topcolonNode3, pclassnameNode4, topsemiNode5);
        }
	nodeList.add(pclassdefineNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AClassName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassName pclassnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pclassnameNode1 = new AClassName(tidentifierNode2);
        }
	nodeList.add(pclassnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAddPattern */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAddPattern paddpatternNode1;
        {
            // Block
        TKeywordAddpattern tkeywordaddpatternNode2;
        TOpLeftLg topleftlgNode3;
        LinkedList listNode5 = new LinkedList();
        TOpRightLg toprightlgNode6;
        tkeywordaddpatternNode2 = (TKeywordAddpattern)nodeArrayList1.get(0);
        topleftlgNode3 = (TOpLeftLg)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        toprightlgNode6 = (TOpRightLg)nodeArrayList4.get(0);

        paddpatternNode1 = new AAddPattern(tkeywordaddpatternNode2, topleftlgNode3, listNode5, toprightlgNode6);
        }
	nodeList.add(paddpatternNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce APatternDeclare */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPatternDeclare ppatterndeclareNode1;
        {
            // Block
        PPattern ppatternNode2;
        TOpColon topcolonNode3;
        PPatternDeclareCombine ppatterndeclarecombineNode4;
        PPatternDeclareCompare ppatterndeclarecompareNode5;
        PPatternDeclareOver ppatterndeclareoverNode6;
        ppatternNode2 = (PPattern)nodeArrayList1.get(0);
        topcolonNode3 = (TOpColon)nodeArrayList2.get(0);
        ppatterndeclarecombineNode4 = (PPatternDeclareCombine)nodeArrayList3.get(0);
        ppatterndeclarecompareNode5 = (PPatternDeclareCompare)nodeArrayList4.get(0);
        ppatterndeclareoverNode6 = (PPatternDeclareOver)nodeArrayList5.get(0);

        ppatterndeclareNode1 = new APatternDeclare(ppatternNode2, topcolonNode3, ppatterndeclarecombineNode4, ppatterndeclarecompareNode5, ppatterndeclareoverNode6);
        }
	nodeList.add(ppatterndeclareNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce APatternDeclareCombine */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPatternDeclareCombine ppatterndeclarecombineNode1;
        {
            // Block
        TOpLeftSm topleftsmNode2;
        PPatternKeyCombine ppatternkeycombineNode3;
        TOpRightSm toprightsmNode4;
        TOpComma topcommaNode5;
        topleftsmNode2 = (TOpLeftSm)nodeArrayList1.get(0);
        ppatternkeycombineNode3 = (PPatternKeyCombine)nodeArrayList2.get(0);
        toprightsmNode4 = (TOpRightSm)nodeArrayList3.get(0);
        topcommaNode5 = (TOpComma)nodeArrayList4.get(0);

        ppatterndeclarecombineNode1 = new APatternDeclareCombine(topleftsmNode2, ppatternkeycombineNode3, toprightsmNode4, topcommaNode5);
        }
	nodeList.add(ppatterndeclarecombineNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce APatternDeclareCompare */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPatternDeclareCompare ppatterndeclarecompareNode1;
        {
            // Block
        TOpLeftSm topleftsmNode2;
        PPatternCompare ppatterncompareNode3;
        TOpRightSm toprightsmNode4;
        TOpComma topcommaNode5;
        topleftsmNode2 = (TOpLeftSm)nodeArrayList1.get(0);
        ppatterncompareNode3 = (PPatternCompare)nodeArrayList2.get(0);
        toprightsmNode4 = (TOpRightSm)nodeArrayList3.get(0);
        topcommaNode5 = (TOpComma)nodeArrayList4.get(0);

        ppatterndeclarecompareNode1 = new APatternDeclareCompare(topleftsmNode2, ppatterncompareNode3, toprightsmNode4, topcommaNode5);
        }
	nodeList.add(ppatterndeclarecompareNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce APatternDeclareOver */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPatternDeclareOver ppatterndeclareoverNode1;
        {
            // Block
        TOpLeftSm topleftsmNode2;
        PPatternOverRule ppatternoverruleNode3;
        TOpRightSm toprightsmNode4;
        TOpSemi topsemiNode5;
        topleftsmNode2 = (TOpLeftSm)nodeArrayList1.get(0);
        ppatternoverruleNode3 = (PPatternOverRule)nodeArrayList2.get(0);
        toprightsmNode4 = (TOpRightSm)nodeArrayList3.get(0);
        topsemiNode5 = (TOpSemi)nodeArrayList4.get(0);

        ppatterndeclareoverNode1 = new APatternDeclareOver(topleftsmNode2, ppatternoverruleNode3, toprightsmNode4, topsemiNode5);
        }
	nodeList.add(ppatterndeclareoverNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce APatternKeyCombine */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPatternKeyCombine ppatternkeycombineNode1;
        {
            // Block
        PPatternKey ppatternkeyNode2;
        PPatternKeyCombineRest ppatternkeycombinerestNode3;
        ppatternkeyNode2 = (PPatternKey)nodeArrayList1.get(0);
        ppatternkeycombinerestNode3 = (PPatternKeyCombineRest)nodeArrayList2.get(0);

        ppatternkeycombineNode1 = new APatternKeyCombine(ppatternkeyNode2, ppatternkeycombinerestNode3);
        }
	nodeList.add(ppatternkeycombineNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AEmptyPatternKeyCombineRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PPatternKeyCombineRest ppatternkeycombinerestNode1;
        {
            // Block

        ppatternkeycombinerestNode1 = new AEmptyPatternKeyCombineRest();
        }
	nodeList.add(ppatternkeycombinerestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce ANonEmptyPatternKeyCombineRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPatternKeyCombineRest ppatternkeycombinerestNode1;
        {
            // Block
        TOpComma topcommaNode2;
        PPatternKey ppatternkeyNode3;
        PPatternKeyCombineRest ppatternkeycombinerestNode4;
        topcommaNode2 = (TOpComma)nodeArrayList1.get(0);
        ppatternkeyNode3 = (PPatternKey)nodeArrayList2.get(0);
        ppatternkeycombinerestNode4 = (PPatternKeyCombineRest)nodeArrayList3.get(0);

        ppatternkeycombinerestNode1 = new ANonEmptyPatternKeyCombineRest(topcommaNode2, ppatternkeyNode3, ppatternkeycombinerestNode4);
        }
	nodeList.add(ppatternkeycombinerestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce APatternKey */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPatternKey ppatternkeyNode1;
        {
            // Block
        PPatternKeyword ppatternkeywordNode2;
        TOpLeftMi topleftmiNode3;
        PRange prangeNode4;
        TOpRightMi toprightmiNode5;
        ppatternkeywordNode2 = (PPatternKeyword)nodeArrayList1.get(0);
        topleftmiNode3 = (TOpLeftMi)nodeArrayList2.get(0);
        prangeNode4 = (PRange)nodeArrayList3.get(0);
        toprightmiNode5 = (TOpRightMi)nodeArrayList4.get(0);

        ppatternkeyNode1 = new APatternKey(ppatternkeywordNode2, topleftmiNode3, prangeNode4, toprightmiNode5);
        }
	nodeList.add(ppatternkeyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce ASamePatternKeyword */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPatternKeyword ppatternkeywordNode1;
        {
            // Block
        TKeywordSame tkeywordsameNode2;
        tkeywordsameNode2 = (TKeywordSame)nodeArrayList1.get(0);

        ppatternkeywordNode1 = new ASamePatternKeyword(tkeywordsameNode2);
        }
	nodeList.add(ppatternkeywordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AStraightPatternKeyword */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPatternKeyword ppatternkeywordNode1;
        {
            // Block
        TKeywordStraight tkeywordstraightNode2;
        tkeywordstraightNode2 = (TKeywordStraight)nodeArrayList1.get(0);

        ppatternkeywordNode1 = new AStraightPatternKeyword(tkeywordstraightNode2);
        }
	nodeList.add(ppatternkeywordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AFlushPatternKeyword */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPatternKeyword ppatternkeywordNode1;
        {
            // Block
        TKeywordFlush tkeywordflushNode2;
        tkeywordflushNode2 = (TKeywordFlush)nodeArrayList1.get(0);

        ppatternkeywordNode1 = new AFlushPatternKeyword(tkeywordflushNode2);
        }
	nodeList.add(ppatternkeywordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ASingleRange */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRange prangeNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        prangeNode1 = new ASingleRange(tnumberNode2);
        }
	nodeList.add(prangeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AMultiRange */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRange prangeNode1;
        {
            // Block
        TNumber tnumberNode2;
        PRangeRest prangerestNode3;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);
        prangerestNode3 = (PRangeRest)nodeArrayList2.get(0);

        prangeNode1 = new AMultiRange(tnumberNode2, prangerestNode3);
        }
	nodeList.add(prangeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce ARangeRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRangeRest prangerestNode1;
        {
            // Block
        TOpMinus topminusNode2;
        TNumber tnumberNode3;
        topminusNode2 = (TOpMinus)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);

        prangerestNode1 = new ARangeRest(topminusNode2, tnumberNode3);
        }
	nodeList.add(prangerestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce APatternCompare */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPatternCompare ppatterncompareNode1;
        {
            // Block
        PCompareRule pcompareruleNode2;
        PCompareRest pcomparerestNode3;
        pcompareruleNode2 = (PCompareRule)nodeArrayList1.get(0);
        pcomparerestNode3 = (PCompareRest)nodeArrayList2.get(0);

        ppatterncompareNode1 = new APatternCompare(pcompareruleNode2, pcomparerestNode3);
        }
	nodeList.add(ppatterncompareNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AEmptyCompareRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PCompareRest pcomparerestNode1;
        {
            // Block

        pcomparerestNode1 = new AEmptyCompareRest();
        }
	nodeList.add(pcomparerestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AMultiCompareRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompareRest pcomparerestNode1;
        {
            // Block
        TOpComma topcommaNode2;
        PCompareRule pcompareruleNode3;
        PCompareRest pcomparerestNode4;
        topcommaNode2 = (TOpComma)nodeArrayList1.get(0);
        pcompareruleNode3 = (PCompareRule)nodeArrayList2.get(0);
        pcomparerestNode4 = (PCompareRest)nodeArrayList3.get(0);

        pcomparerestNode1 = new AMultiCompareRest(topcommaNode2, pcompareruleNode3, pcomparerestNode4);
        }
	nodeList.add(pcomparerestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce ABigCompareRule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompareRule pcompareruleNode1;
        {
            // Block
        TOpPlus topplusNode2;
        topplusNode2 = (TOpPlus)nodeArrayList1.get(0);

        pcompareruleNode1 = new ABigCompareRule(topplusNode2);
        }
	nodeList.add(pcompareruleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ASmallCompareRule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompareRule pcompareruleNode1;
        {
            // Block
        TOpMinus topminusNode2;
        topminusNode2 = (TOpMinus)nodeArrayList1.get(0);

        pcompareruleNode1 = new ASmallCompareRule(topminusNode2);
        }
	nodeList.add(pcompareruleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AEqualCompareRule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompareRule pcompareruleNode1;
        {
            // Block
        TOpEqual topequalNode2;
        topequalNode2 = (TOpEqual)nodeArrayList1.get(0);

        pcompareruleNode1 = new AEqualCompareRule(topequalNode2);
        }
	nodeList.add(pcompareruleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ASuitCompareRule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompareRule pcompareruleNode1;
        {
            // Block
        TOpSuit topsuitNode2;
        topsuitNode2 = (TOpSuit)nodeArrayList1.get(0);

        pcompareruleNode1 = new ASuitCompareRule(topsuitNode2);
        }
	nodeList.add(pcompareruleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AEmptyPatternOverRule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PPatternOverRule ppatternoverruleNode1;
        {
            // Block

        ppatternoverruleNode1 = new AEmptyPatternOverRule();
        }
	nodeList.add(ppatternoverruleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce ARestPatternOverRule */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPatternOverRule ppatternoverruleNode1;
        {
            // Block
        PPattern ppatternNode2;
        PPatternOverRest ppatternoverrestNode3;
        ppatternNode2 = (PPattern)nodeArrayList1.get(0);
        ppatternoverrestNode3 = (PPatternOverRest)nodeArrayList2.get(0);

        ppatternoverruleNode1 = new ARestPatternOverRule(ppatternNode2, ppatternoverrestNode3);
        }
	nodeList.add(ppatternoverruleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AEmptyPatternOverRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PPatternOverRest ppatternoverrestNode1;
        {
            // Block

        ppatternoverrestNode1 = new AEmptyPatternOverRest();
        }
	nodeList.add(ppatternoverrestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ARestPatternOverRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPatternOverRest ppatternoverrestNode1;
        {
            // Block
        TOpComma topcommaNode2;
        PPattern ppatternNode3;
        PPatternOverRest ppatternoverrestNode4;
        topcommaNode2 = (TOpComma)nodeArrayList1.get(0);
        ppatternNode3 = (PPattern)nodeArrayList2.get(0);
        ppatternoverrestNode4 = (PPatternOverRest)nodeArrayList3.get(0);

        ppatternoverrestNode1 = new ARestPatternOverRest(topcommaNode2, ppatternNode3, ppatternoverrestNode4);
        }
	nodeList.add(ppatternoverrestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce APattern */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPattern ppatternNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ppatternNode1 = new APattern(tidentifierNode2);
        }
	nodeList.add(ppatternNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AConfig */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConfig pconfigNode1;
        {
            // Block
        TKeywordConfig tkeywordconfigNode2;
        TOpLeftLg topleftlgNode3;
        LinkedList listNode5 = new LinkedList();
        TOpRightLg toprightlgNode6;
        tkeywordconfigNode2 = (TKeywordConfig)nodeArrayList1.get(0);
        topleftlgNode3 = (TOpLeftLg)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        toprightlgNode6 = (TOpRightLg)nodeArrayList4.get(0);

        pconfigNode1 = new AConfig(tkeywordconfigNode2, topleftlgNode3, listNode5, toprightlgNode6);
        }
	nodeList.add(pconfigNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ANumber1ConfigStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConfigStmt pconfigstmtNode1;
        {
            // Block
        PConfigKeyword pconfigkeywordNode2;
        TOpColon topcolonNode3;
        PConfigValue pconfigvalueNode4;
        TOpSemi topsemiNode6;
        pconfigkeywordNode2 = (PConfigKeyword)nodeArrayList1.get(0);
        topcolonNode3 = (TOpColon)nodeArrayList2.get(0);
        {
            // Block
        TNumber tnumberNode5;
        tnumberNode5 = (TNumber)nodeArrayList3.get(0);

        pconfigvalueNode4 = new ANumberConfigValue(tnumberNode5);
        }
        topsemiNode6 = (TOpSemi)nodeArrayList4.get(0);

        pconfigstmtNode1 = new AConfigStmt(pconfigkeywordNode2, topcolonNode3, pconfigvalueNode4, topsemiNode6);
        }
	nodeList.add(pconfigstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ARankName1$1ConfigStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConfigStmt pconfigstmtNode1;
        {
            // Block
        PConfigKeyword pconfigkeywordNode2;
        TOpColon topcolonNode3;
        PConfigValue pconfigvalueNode4;
        TOpSemi topsemiNode7;
        pconfigkeywordNode2 = (PConfigKeyword)nodeArrayList1.get(0);
        topcolonNode3 = (TOpColon)nodeArrayList2.get(0);
        {
            // Block
        PRankName pranknameNode5;
        {
            // Block
        TStringLiteral tstringliteralNode6;
        tstringliteralNode6 = (TStringLiteral)nodeArrayList3.get(0);

        pranknameNode5 = new ARankName(tstringliteralNode6);
        }

        pconfigvalueNode4 = new ARankNameConfigValue(pranknameNode5);
        }
        topsemiNode7 = (TOpSemi)nodeArrayList4.get(0);

        pconfigstmtNode1 = new AConfigStmt(pconfigkeywordNode2, topcolonNode3, pconfigvalueNode4, topsemiNode7);
        }
	nodeList.add(pconfigstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AWinConfigKeyword */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConfigKeyword pconfigkeywordNode1;
        {
            // Block
        TKeywordWin tkeywordwinNode2;
        tkeywordwinNode2 = (TKeywordWin)nodeArrayList1.get(0);

        pconfigkeywordNode1 = new AWinConfigKeyword(tkeywordwinNode2);
        }
	nodeList.add(pconfigkeywordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ASystempairConfigKeyword */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConfigKeyword pconfigkeywordNode1;
        {
            // Block
        TKeywordSystem tkeywordsystemNode2;
        tkeywordsystemNode2 = (TKeywordSystem)nodeArrayList1.get(0);

        pconfigkeywordNode1 = new ASystempairConfigKeyword(tkeywordsystemNode2);
        }
	nodeList.add(pconfigkeywordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ASelfreplaceConfigKeyword */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConfigKeyword pconfigkeywordNode1;
        {
            // Block
        TKeywordSelfreplace tkeywordselfreplaceNode2;
        tkeywordselfreplaceNode2 = (TKeywordSelfreplace)nodeArrayList1.get(0);

        pconfigkeywordNode1 = new ASelfreplaceConfigKeyword(tkeywordselfreplaceNode2);
        }
	nodeList.add(pconfigkeywordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ANextConfigKeyword */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConfigKeyword pconfigkeywordNode1;
        {
            // Block
        TKeywordNext tkeywordnextNode2;
        tkeywordnextNode2 = (TKeywordNext)nodeArrayList1.get(0);

        pconfigkeywordNode1 = new ANextConfigKeyword(tkeywordnextNode2);
        }
	nodeList.add(pconfigkeywordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ADefaultstatusConfigKeyword */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConfigKeyword pconfigkeywordNode1;
        {
            // Block
        TKeywordDefaultstatus tkeyworddefaultstatusNode2;
        tkeyworddefaultstatusNode2 = (TKeywordDefaultstatus)nodeArrayList1.get(0);

        pconfigkeywordNode1 = new ADefaultstatusConfigKeyword(tkeyworddefaultstatusNode2);
        }
	nodeList.add(pconfigkeywordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ARankConfigKeyword */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConfigKeyword pconfigkeywordNode1;
        {
            // Block
        TKeywordRank tkeywordrankNode2;
        tkeywordrankNode2 = (TKeywordRank)nodeArrayList1.get(0);

        pconfigkeywordNode1 = new ARankConfigKeyword(tkeywordrankNode2);
        }
	nodeList.add(pconfigkeywordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce ABefore$Before1ValidStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValidStmt pvalidstmtNode1;
        {
            // Block
        PBeforStmt pbeforstmtNode2;
        {
            // Block
        TKeywordBefore tkeywordbeforeNode3;
        TOpLeftLg topleftlgNode4;
        TJavaLiteral tjavaliteralNode5;
        TOpRightLg toprightlgNode6;
        tkeywordbeforeNode3 = (TKeywordBefore)nodeArrayList1.get(0);
        topleftlgNode4 = (TOpLeftLg)nodeArrayList2.get(0);
        tjavaliteralNode5 = (TJavaLiteral)nodeArrayList3.get(0);
        toprightlgNode6 = (TOpRightLg)nodeArrayList4.get(0);

        pbeforstmtNode2 = new ABeforeBeforStmt(tkeywordbeforeNode3, topleftlgNode4, tjavaliteralNode5, toprightlgNode6);
        }

        pvalidstmtNode1 = new ABeforeValidStmt(pbeforstmtNode2);
        }
	nodeList.add(pvalidstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AAfter$Empty1ValidStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PValidStmt pvalidstmtNode1;
        {
            // Block
        PAfterStmt pafterstmtNode2;
        {
            // Block

        pafterstmtNode2 = new AEmptyAfterStmt();
        }

        pvalidstmtNode1 = new AAfterValidStmt(pafterstmtNode2);
        }
	nodeList.add(pvalidstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AAfter$After1ValidStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValidStmt pvalidstmtNode1;
        {
            // Block
        PAfterStmt pafterstmtNode2;
        {
            // Block
        TKerwordAfter tkerwordafterNode3;
        TOpLeftLg topleftlgNode4;
        TJavaLiteral tjavaliteralNode5;
        TOpRightLg toprightlgNode6;
        tkerwordafterNode3 = (TKerwordAfter)nodeArrayList1.get(0);
        topleftlgNode4 = (TOpLeftLg)nodeArrayList2.get(0);
        tjavaliteralNode5 = (TJavaLiteral)nodeArrayList3.get(0);
        toprightlgNode6 = (TOpRightLg)nodeArrayList4.get(0);

        pafterstmtNode2 = new AAfterAfterStmt(tkerwordafterNode3, topleftlgNode4, tjavaliteralNode5, toprightlgNode6);
        }

        pvalidstmtNode1 = new AAfterValidStmt(pafterstmtNode2);
        }
	nodeList.add(pvalidstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AInitCard */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInitCard pinitcardNode1;
        {
            // Block
        TKeywordInitcard tkeywordinitcardNode2;
        TOpLeftSm topleftsmNode3;
        PInitPlayer pinitplayerNode4;
        TOpRightSm toprightsmNode5;
        TOpLeftLg topleftlgNode6;
        PInitCardStmt pinitcardstmtNode7;
        TOpRightLg toprightlgNode8;
        tkeywordinitcardNode2 = (TKeywordInitcard)nodeArrayList1.get(0);
        topleftsmNode3 = (TOpLeftSm)nodeArrayList2.get(0);
        pinitplayerNode4 = (PInitPlayer)nodeArrayList3.get(0);
        toprightsmNode5 = (TOpRightSm)nodeArrayList4.get(0);
        topleftlgNode6 = (TOpLeftLg)nodeArrayList5.get(0);
        pinitcardstmtNode7 = (PInitCardStmt)nodeArrayList6.get(0);
        toprightlgNode8 = (TOpRightLg)nodeArrayList7.get(0);

        pinitcardNode1 = new AInitCard(tkeywordinitcardNode2, topleftsmNode3, pinitplayerNode4, toprightsmNode5, topleftlgNode6, pinitcardstmtNode7, toprightlgNode8);
        }
	nodeList.add(pinitcardNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AInitPlayer */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInitPlayer pinitplayerNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pinitplayerNode1 = new AInitPlayer(tidentifierNode2);
        }
	nodeList.add(pinitplayerNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AInitCardStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInitCardStmt pinitcardstmtNode1;
        {
            // Block
        PInitStmt pinitstmtNode2;
        PInitStmtRest pinitstmtrestNode3;
        pinitstmtNode2 = (PInitStmt)nodeArrayList1.get(0);
        pinitstmtrestNode3 = (PInitStmtRest)nodeArrayList2.get(0);

        pinitcardstmtNode1 = new AInitCardStmt(pinitstmtNode2, pinitstmtrestNode3);
        }
	nodeList.add(pinitcardstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AEmptyInitStmtRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PInitStmtRest pinitstmtrestNode1;
        {
            // Block

        pinitstmtrestNode1 = new AEmptyInitStmtRest();
        }
	nodeList.add(pinitstmtrestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ARestInitStmtRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInitStmtRest pinitstmtrestNode1;
        {
            // Block
        PInitStmt pinitstmtNode2;
        PInitStmtRest pinitstmtrestNode3;
        pinitstmtNode2 = (PInitStmt)nodeArrayList1.get(0);
        pinitstmtrestNode3 = (PInitStmtRest)nodeArrayList2.get(0);

        pinitstmtrestNode1 = new ARestInitStmtRest(pinitstmtNode2, pinitstmtrestNode3);
        }
	nodeList.add(pinitstmtrestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AInitStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInitStmt pinitstmtNode1;
        {
            // Block
        PFuncStmt pfuncstmtNode2;
        pfuncstmtNode2 = (PFuncStmt)nodeArrayList1.get(0);

        pinitstmtNode1 = new AInitStmt(pfuncstmtNode2);
        }
	nodeList.add(pinitstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AFuncStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncStmt pfuncstmtNode1;
        {
            // Block
        PFuncKeyword pfunckeywordNode2;
        TOpLeftSm topleftsmNode3;
        PFuncPara pfuncparaNode4;
        TOpRightSm toprightsmNode5;
        TOpSemi topsemiNode6;
        pfunckeywordNode2 = (PFuncKeyword)nodeArrayList1.get(0);
        topleftsmNode3 = (TOpLeftSm)nodeArrayList2.get(0);
        pfuncparaNode4 = (PFuncPara)nodeArrayList3.get(0);
        toprightsmNode5 = (TOpRightSm)nodeArrayList4.get(0);
        topsemiNode6 = (TOpSemi)nodeArrayList5.get(0);

        pfuncstmtNode1 = new AFuncStmt(pfunckeywordNode2, topleftsmNode3, pfuncparaNode4, toprightsmNode5, topsemiNode6);
        }
	nodeList.add(pfuncstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ADrawtoFuncKeyword */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncKeyword pfunckeywordNode1;
        {
            // Block
        TFuncDrawto tfuncdrawtoNode2;
        tfuncdrawtoNode2 = (TFuncDrawto)nodeArrayList1.get(0);

        pfunckeywordNode1 = new ADrawtoFuncKeyword(tfuncdrawtoNode2);
        }
	nodeList.add(pfunckeywordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ADrawtoallFuncKeyword */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncKeyword pfunckeywordNode1;
        {
            // Block
        TFuncDrawtoall tfuncdrawtoallNode2;
        tfuncdrawtoallNode2 = (TFuncDrawtoall)nodeArrayList1.get(0);

        pfunckeywordNode1 = new ADrawtoallFuncKeyword(tfuncdrawtoallNode2);
        }
	nodeList.add(pfunckeywordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce ASetcurplayeridFuncKeyword */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncKeyword pfunckeywordNode1;
        {
            // Block
        TFuncSetcurplayerid tfuncsetcurplayeridNode2;
        tfuncsetcurplayeridNode2 = (TFuncSetcurplayerid)nodeArrayList1.get(0);

        pfunckeywordNode1 = new ASetcurplayeridFuncKeyword(tfuncsetcurplayeridNode2);
        }
	nodeList.add(pfunckeywordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ASetdisplaysizeFuncKeyword */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncKeyword pfunckeywordNode1;
        {
            // Block
        TFuncSetdisplaysize tfuncsetdisplaysizeNode2;
        tfuncsetdisplaysizeNode2 = (TFuncSetdisplaysize)nodeArrayList1.get(0);

        pfunckeywordNode1 = new ASetdisplaysizeFuncKeyword(tfuncsetdisplaysizeNode2);
        }
	nodeList.add(pfunckeywordNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AEmptyFuncPara */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PFuncPara pfuncparaNode1;
        {
            // Block

        pfuncparaNode1 = new AEmptyFuncPara();
        }
	nodeList.add(pfuncparaNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce ANoEmptyFuncPara */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncPara pfuncparaNode1;
        {
            // Block
        PPara pparaNode2;
        PFuncParaRest pfuncpararestNode3;
        pparaNode2 = (PPara)nodeArrayList1.get(0);
        pfuncpararestNode3 = (PFuncParaRest)nodeArrayList2.get(0);

        pfuncparaNode1 = new ANoEmptyFuncPara(pparaNode2, pfuncpararestNode3);
        }
	nodeList.add(pfuncparaNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AEmptyFuncParaRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PFuncParaRest pfuncpararestNode1;
        {
            // Block

        pfuncpararestNode1 = new AEmptyFuncParaRest();
        }
	nodeList.add(pfuncpararestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce ANoEmptyFuncParaRest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncParaRest pfuncpararestNode1;
        {
            // Block
        TOpComma topcommaNode2;
        PPara pparaNode3;
        PFuncParaRest pfuncpararestNode4;
        topcommaNode2 = (TOpComma)nodeArrayList1.get(0);
        pparaNode3 = (PPara)nodeArrayList2.get(0);
        pfuncpararestNode4 = (PFuncParaRest)nodeArrayList3.get(0);

        pfuncpararestNode1 = new ANoEmptyFuncParaRest(topcommaNode2, pparaNode3, pfuncpararestNode4);
        }
	nodeList.add(pfuncpararestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce ANumberPara */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPara pparaNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pparaNode1 = new ANumberPara(tnumberNode2);
        }
	nodeList.add(pparaNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AIdPara */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPara pparaNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pparaNode1 = new AIdPara(tidentifierNode2);
        }
	nodeList.add(pparaNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AGetStatus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGetStatus pgetstatusNode1;
        {
            // Block
        TKeywordGetstatus tkeywordgetstatusNode2;
        TOpLeftSm topleftsmNode3;
        TOpRightSm toprightsmNode4;
        TOpLeftLg topleftlgNode5;
        TOpRightLg toprightlgNode6;
        tkeywordgetstatusNode2 = (TKeywordGetstatus)nodeArrayList1.get(0);
        topleftsmNode3 = (TOpLeftSm)nodeArrayList2.get(0);
        toprightsmNode4 = (TOpRightSm)nodeArrayList3.get(0);
        topleftlgNode5 = (TOpLeftLg)nodeArrayList4.get(0);
        toprightlgNode6 = (TOpRightLg)nodeArrayList5.get(0);

        pgetstatusNode1 = new AGetStatus(tkeywordgetstatusNode2, topleftsmNode3, toprightsmNode4, topleftlgNode5, toprightlgNode6);
        }
	nodeList.add(pgetstatusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AIsValidCombination */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIsValidCombination pisvalidcombinationNode1;
        {
            // Block
        TKeywordIsvalidcombination tkeywordisvalidcombinationNode2;
        TOpLeftSm topleftsmNode3;
        PCardSelected pcardselectedNode4;
        TOpRightSm toprightsmNode5;
        TOpLeftLg topleftlgNode6;
        PValidStmt pvalidstmtNode7;
        TOpRightLg toprightlgNode8;
        tkeywordisvalidcombinationNode2 = (TKeywordIsvalidcombination)nodeArrayList1.get(0);
        topleftsmNode3 = (TOpLeftSm)nodeArrayList2.get(0);
        pcardselectedNode4 = (PCardSelected)nodeArrayList3.get(0);
        toprightsmNode5 = (TOpRightSm)nodeArrayList4.get(0);
        topleftlgNode6 = (TOpLeftLg)nodeArrayList5.get(0);
        pvalidstmtNode7 = (PValidStmt)nodeArrayList6.get(0);
        toprightlgNode8 = (TOpRightLg)nodeArrayList7.get(0);

        pisvalidcombinationNode1 = new AIsValidCombination(tkeywordisvalidcombinationNode2, topleftsmNode3, pcardselectedNode4, toprightsmNode5, topleftlgNode6, pvalidstmtNode7, toprightlgNode8);
        }
	nodeList.add(pisvalidcombinationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce ACardSelected */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCardSelected pcardselectedNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pcardselectedNode1 = new ACardSelected(tidentifierNode2);
        }
	nodeList.add(pcardselectedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AIsWinnerFound */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIsWinnerFound piswinnerfoundNode1;
        {
            // Block
        TKeywordIswinnerfound tkeywordiswinnerfoundNode2;
        TOpLeftSm topleftsmNode3;
        PValidStmt pvalidstmtNode4;
        TOpRightSm toprightsmNode5;
        TOpLeftLg topleftlgNode6;
        TOpRightLg toprightlgNode7;
        tkeywordiswinnerfoundNode2 = (TKeywordIswinnerfound)nodeArrayList1.get(0);
        topleftsmNode3 = (TOpLeftSm)nodeArrayList2.get(0);
        pvalidstmtNode4 = (PValidStmt)nodeArrayList3.get(0);
        toprightsmNode5 = (TOpRightSm)nodeArrayList4.get(0);
        topleftlgNode6 = (TOpLeftLg)nodeArrayList5.get(0);
        toprightlgNode7 = (TOpRightLg)nodeArrayList6.get(0);

        piswinnerfoundNode1 = new AIsWinnerFound(tkeywordiswinnerfoundNode2, topleftsmNode3, pvalidstmtNode4, toprightsmNode5, topleftlgNode6, toprightlgNode7);
        }
	nodeList.add(piswinnerfoundNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce ANextTurn */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNextTurn pnextturnNode1;
        {
            // Block
        TKeywordNextturn tkeywordnextturnNode2;
        TOpLeftSm topleftsmNode3;
        TOpRightSm toprightsmNode4;
        TOpLeftLg topleftlgNode5;
        PValidStmt pvalidstmtNode6;
        TOpRightLg toprightlgNode7;
        tkeywordnextturnNode2 = (TKeywordNextturn)nodeArrayList1.get(0);
        topleftsmNode3 = (TOpLeftSm)nodeArrayList2.get(0);
        toprightsmNode4 = (TOpRightSm)nodeArrayList3.get(0);
        topleftlgNode5 = (TOpLeftLg)nodeArrayList4.get(0);
        pvalidstmtNode6 = (PValidStmt)nodeArrayList5.get(0);
        toprightlgNode7 = (TOpRightLg)nodeArrayList6.get(0);

        pnextturnNode1 = new ANextTurn(tkeywordnextturnNode2, topleftsmNode3, toprightsmNode4, topleftlgNode5, pvalidstmtNode6, toprightlgNode7);
        }
	nodeList.add(pnextturnNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ATerminal$PatternDeclare */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PPatternDeclare ppatterndeclareNode1;
        ppatterndeclareNode1 = (PPatternDeclare)nodeArrayList1.get(0);
	if(ppatterndeclareNode1 != null)
	{
	  listNode2.add(ppatterndeclareNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ANonTerminal$PatternDeclare */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PPatternDeclare ppatterndeclareNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppatterndeclareNode2 = (PPatternDeclare)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppatterndeclareNode2 != null)
	{
	  listNode3.add(ppatterndeclareNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce ATerminal$ConfigStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PConfigStmt pconfigstmtNode1;
        pconfigstmtNode1 = (PConfigStmt)nodeArrayList1.get(0);
	if(pconfigstmtNode1 != null)
	{
	  listNode2.add(pconfigstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce ANonTerminal$ConfigStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PConfigStmt pconfigstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pconfigstmtNode2 = (PConfigStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pconfigstmtNode2 != null)
	{
	  listNode3.add(pconfigstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {27, SHIFT, 4}, },
			{{-1, ERROR, 2}, {40, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {1, SHIFT, 5}, },
			{{-1, ERROR, 4}, {24, SHIFT, 7}, },
			{{-1, ERROR, 5}, {36, SHIFT, 9}, },
			{{-1, ERROR, 6}, {5, SHIFT, 10}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 8}, {25, SHIFT, 12}, },
			{{-1, ERROR, 9}, {24, SHIFT, 13}, },
			{{-1, ERROR, 10}, {36, SHIFT, 17}, },
			{{-1, ERROR, 11}, {12, SHIFT, 18}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 15}, {27, SHIFT, 20}, },
			{{-1, ERROR, 16}, {24, SHIFT, 13}, {37, SHIFT, 21}, },
			{{-1, ERROR, 17}, {6, SHIFT, 23}, {7, SHIFT, 24}, {8, SHIFT, 25}, {9, SHIFT, 26}, {10, SHIFT, 27}, {11, SHIFT, 28}, },
			{{-1, ERROR, 18}, {32, SHIFT, 32}, },
			{{-1, ERROR, 19}, {13, SHIFT, 33}, },
			{{-1, ERROR, 20}, {32, SHIFT, 35}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 30}, {27, SHIFT, 37}, },
			{{-1, ERROR, 31}, {6, SHIFT, 23}, {7, SHIFT, 24}, {8, SHIFT, 25}, {9, SHIFT, 26}, {10, SHIFT, 27}, {11, SHIFT, 28}, {37, SHIFT, 38}, },
			{{-1, ERROR, 32}, {24, SHIFT, 40}, },
			{{-1, ERROR, 33}, {32, SHIFT, 42}, },
			{{-1, ERROR, 34}, {14, SHIFT, 43}, },
			{{-1, ERROR, 35}, {2, SHIFT, 45}, {3, SHIFT, 46}, {4, SHIFT, 47}, },
			{{-1, ERROR, 36}, {32, SHIFT, 51}, },
			{{-1, ERROR, 37}, {23, SHIFT, 53}, {38, SHIFT, 54}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 41}, {33, SHIFT, 55}, },
			{{-1, ERROR, 42}, {33, SHIFT, 56}, },
			{{-1, ERROR, 43}, {32, SHIFT, 57}, },
			{{-1, ERROR, 44}, {15, SHIFT, 58}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 48}, {33, SHIFT, 60}, },
			{{-1, REDUCE, 9}, {26, SHIFT, 61}, },
			{{-1, ERROR, 50}, {34, SHIFT, 63}, },
			{{-1, ERROR, 51}, {28, SHIFT, 64}, {29, SHIFT, 65}, {30, SHIFT, 66}, {31, SHIFT, 67}, },
			{{-1, ERROR, 52}, {32, SHIFT, 70}, },
			{{-1, ERROR, 53}, {25, SHIFT, 72}, },
			{{-1, ERROR, 54}, {25, SHIFT, 73}, },
			{{-1, ERROR, 55}, {36, SHIFT, 74}, },
			{{-1, ERROR, 56}, {36, SHIFT, 75}, },
			{{-1, ERROR, 57}, {24, SHIFT, 76}, },
			{{-1, ERROR, 58}, {32, SHIFT, 78}, },
			{{-1, ERROR, 59}, {16, SHIFT, 79}, },
			{{-1, ERROR, 60}, {26, SHIFT, 81}, },
			{{-1, ERROR, 61}, {2, SHIFT, 45}, {3, SHIFT, 46}, {4, SHIFT, 47}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 63}, {23, SHIFT, 83}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 68}, {33, SHIFT, 85}, },
			{{-1, REDUCE, 19}, {26, SHIFT, 86}, },
			{{-1, REDUCE, 25}, {24, SHIFT, 13}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 74}, {19, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, ERROR, 75}, {37, SHIFT, 98}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 77}, {33, SHIFT, 99}, },
			{{-1, REDUCE, 40}, {17, SHIFT, 100}, {18, SHIFT, 101}, },
			{{-1, ERROR, 79}, {32, SHIFT, 103}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 9}, {26, SHIFT, 61}, },
			{{-1, REDUCE, 15}, {29, SHIFT, 105}, },
			{{-1, ERROR, 84}, {35, SHIFT, 107}, },
			{{-1, ERROR, 85}, {26, SHIFT, 108}, },
			{{-1, ERROR, 86}, {28, SHIFT, 64}, {29, SHIFT, 65}, {30, SHIFT, 66}, {31, SHIFT, 67}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 88}, {33, SHIFT, 110}, },
			{{-1, REDUCE, 27}, {26, SHIFT, 111}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 94}, {37, SHIFT, 113}, },
			{{-1, REDUCE, 45}, {19, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 97}, {32, SHIFT, 116}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 99}, {36, SHIFT, 117}, },
			{{-1, ERROR, 100}, {36, SHIFT, 118}, },
			{{-1, ERROR, 101}, {36, SHIFT, 119}, },
			{{-1, ERROR, 102}, {33, SHIFT, 120}, },
			{{-1, ERROR, 103}, {33, SHIFT, 121}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 105}, {23, SHIFT, 122}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 19}, {26, SHIFT, 86}, },
			{{-1, ERROR, 110}, {25, SHIFT, 124}, },
			{{-1, ERROR, 111}, {24, SHIFT, 13}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, {19, SHIFT, 90}, {20, SHIFT, 91}, {21, SHIFT, 92}, {22, SHIFT, 93}, },
			{{-1, REDUCE, 53}, {23, SHIFT, 127}, {24, SHIFT, 128}, },
			{{-1, REDUCE, 40}, {17, SHIFT, 100}, {18, SHIFT, 101}, },
			{{-1, ERROR, 118}, {39, SHIFT, 132}, },
			{{-1, ERROR, 119}, {39, SHIFT, 133}, },
			{{-1, ERROR, 120}, {36, SHIFT, 134}, },
			{{-1, ERROR, 121}, {36, SHIFT, 135}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 27}, {26, SHIFT, 111}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 129}, {33, SHIFT, 137}, },
			{{-1, REDUCE, 55}, {26, SHIFT, 138}, },
			{{-1, ERROR, 131}, {37, SHIFT, 140}, },
			{{-1, ERROR, 132}, {37, SHIFT, 141}, },
			{{-1, ERROR, 133}, {37, SHIFT, 142}, },
			{{-1, ERROR, 134}, {37, SHIFT, 143}, },
			{{-1, REDUCE, 40}, {17, SHIFT, 100}, {18, SHIFT, 101}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 137}, {25, SHIFT, 145}, },
			{{-1, ERROR, 138}, {23, SHIFT, 127}, {24, SHIFT, 128}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 144}, {37, SHIFT, 147}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 55}, {26, SHIFT, 138}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 56}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 8}, },
			{{-1, 6}, },
			{{-1, 14}, {16, 22}, },
			{{-1, 36}, },
			{{-1, 52}, },
			{{-1, 71}, },
			{{-1, 48}, },
			{{-1, 62}, {82, 104}, },
			{{-1, 49}, {61, 82}, },
			{{-1, 50}, },
			{{-1, 84}, },
			{{-1, 106}, },
			{{-1, 68}, },
			{{-1, 87}, {109, 123}, },
			{{-1, 69}, {86, 109}, },
			{{-1, 88}, },
			{{-1, 112}, {125, 136}, },
			{{-1, 15}, {70, 89}, {111, 125}, },
			{{-1, 11}, },
			{{-1, 29}, {31, 39}, },
			{{-1, 30}, },
			{{-1, 102}, {117, 131}, {135, 144}, },
			{{-1, 19}, },
			{{-1, 41}, },
			{{-1, 94}, },
			{{-1, 114}, {115, 126}, },
			{{-1, 115}, {74, 95}, },
			{{-1, 96}, },
			{{-1, 97}, },
			{{-1, 129}, },
			{{-1, 139}, {146, 148}, },
			{{-1, 130}, {138, 146}, },
			{{-1, 34}, },
			{{-1, 44}, },
			{{-1, 77}, },
			{{-1, 59}, },
			{{-1, 80}, },
			{{-1, 16}, },
			{{-1, 31}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: ':'",
			"expecting: EOF",
			"expecting: 'addPattern'",
			"expecting: identifier",
			"expecting: '{'",
			"expecting: 'config'",
			"expecting: ';'",
			"expecting: 'initCard'",
			"expecting: ',', ':', ')'",
			"expecting: identifier, '}'",
			"expecting: 'win', 'systemPair', 'selfReplace', 'next', 'defaultStatus', 'rank'",
			"expecting: '('",
			"expecting: 'getStatus'",
			"expecting: 'win', 'systemPair', 'selfReplace', 'next', 'defaultStatus', 'rank', '}'",
			"expecting: 'isValidCombination'",
			"expecting: 'same', 'straight', 'flush'",
			"expecting: number, string literal",
			"expecting: ')'",
			"expecting: 'isWinnerFound'",
			"expecting: '['",
			"expecting: ',', ')'",
			"expecting: '+', '-', '=', '^'",
			"expecting: 'nextTurn'",
			"expecting: ','",
			"expecting: number",
			"expecting: identifier, ')'",
			"expecting: 'drawTo', 'drawToAll', 'setCurPlayerID', 'setDisplaySize'",
			"expecting: '}'",
			"expecting: 'before', 'after', ')'",
			"expecting: '-', ']'",
			"expecting: ']'",
			"expecting: 'drawTo', 'drawToAll', 'setCurPlayerID', 'setDisplaySize', '}'",
			"expecting: number, identifier, ')'",
			"expecting: 'before', 'after', '}'",
			"expecting: java literal",
			"expecting: number, identifier",
			"expecting: ')', '}'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 7, 4, 5, 8, 3, 9, 10, 1, 10, 11, 12, 13, 12, 6, 10, 1, 1, 1, 1, 1, 1, 14, 1, 14, 4, 12, 15, 16, 12, 17, 8, 14, 18, 18, 18, 12, 19, 20, 20, 20, 18, 21, 20, 22, 12, 7, 7, 5, 5, 4, 12, 23, 24, 16, 18, 25, 21, 21, 21, 21, 18, 21, 26, 10, 14, 14, 27, 28, 18, 18, 29, 12, 2, 12, 21, 30, 31, 24, 22, 18, 18, 21, 12, 12, 12, 12, 28, 32, 32, 12, 15, 5, 5, 5, 18, 18, 18, 25, 31, 21, 12, 21, 7, 4, 18, 13, 28, 32, 33, 34, 35, 35, 5, 5, 31, 18, 10, 21, 28, 21, 21, 18, 21, 28, 28, 28, 28, 34, 18, 7, 36, 18, 19, 37, 37, 23, 28, 32, 21, 2, 18, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
