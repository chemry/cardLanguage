/* This file was generated by SableCC (http://www.sablecc.org/). */

package card.lexer;

import java.io.*;
import card.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            @SuppressWarnings("hiding") Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            @SuppressWarnings("hiding") Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            @SuppressWarnings("hiding") Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            @SuppressWarnings("hiding") Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordClass(line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordAddpattern(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordSame(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordStraight(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordFlush(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordConfig(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordWin(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordSystem(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordSelfreplace(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordNext(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordDefaultstatus(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordRank(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordInitcard(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordGetstatus(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordIsvalidcombination(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordIswinnerfound(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordNextturn(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeywordBefore(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKerwordAfter(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFuncDrawto(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFuncDrawtoall(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFuncSetcurplayerid(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFuncSetdisplaysize(line, pos); }
    Token new23(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNumber(text, line, pos); }
    Token new24(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpSemi(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpComma(line, pos); }
    Token new27(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpColon(line, pos); }
    Token new28(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpPlus(line, pos); }
    Token new29(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpMinus(line, pos); }
    Token new30(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpEqual(line, pos); }
    Token new31(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpSuit(line, pos); }
    Token new32(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpLeftSm(line, pos); }
    Token new33(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpRightSm(line, pos); }
    Token new34(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpLeftMi(line, pos); }
    Token new35(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpRightMi(line, pos); }
    Token new36(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpLeftLg(line, pos); }
    Token new37(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpRightLg(line, pos); }
    Token new38(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new39(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStringLiteral(text, line, pos); }
    Token new40(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TJavaLiteral(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {40, 40, 6}, {41, 41, 7}, {43, 43, 8}, {44, 44, 9}, {45, 45, 10}, {48, 57, 11}, {58, 58, 12}, {59, 59, 13}, {60, 60, 14}, {61, 61, 15}, {65, 90, 16}, {91, 91, 17}, {93, 93, 18}, {94, 94, 19}, {97, 97, 20}, {98, 98, 21}, {99, 99, 22}, {100, 100, 23}, {101, 101, 24}, {102, 102, 25}, {103, 103, 26}, {104, 104, 24}, {105, 105, 27}, {106, 109, 24}, {110, 110, 28}, {111, 113, 24}, {114, 114, 29}, {115, 115, 30}, {116, 118, 24}, {119, 119, 31}, {120, 122, 24}, {123, 123, 32}, {125, 125, 33}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{34, 34, 34}, {48, 57, 35}, {65, 90, 36}, {97, 122, 37}, },
            {},
            {},
            {},
            {},
            {},
            {{48, 57, 11}, },
            {},
            {},
            {{0, 33, 38}, {35, 61, 38}, {62, 62, 39}, {63, 127, 38}, },
            {},
            {{65, 90, 16}, {97, 122, 24}, },
            {},
            {},
            {},
            {{65, 90, 16}, {97, 99, 24}, {100, 100, 40}, {101, 101, 24}, {102, 102, 41}, {103, 122, 24}, },
            {{65, 90, 16}, {97, 100, 24}, {101, 101, 42}, {102, 122, 24}, },
            {{65, 90, 16}, {97, 107, 24}, {108, 108, 43}, {109, 110, 24}, {111, 111, 44}, {112, 122, 24}, },
            {{65, 100, -23}, {101, 101, 45}, {102, 113, 24}, {114, 114, 46}, {115, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 107, -24}, {108, 108, 47}, {109, 122, 24}, },
            {{65, 100, -23}, {101, 101, 48}, {102, 122, 24}, },
            {{65, 90, 16}, {97, 109, 24}, {110, 110, 49}, {111, 114, 24}, {115, 115, 50}, {116, 122, 24}, },
            {{65, 100, -23}, {101, 101, 51}, {102, 122, 24}, },
            {{65, 90, 16}, {97, 97, 52}, {98, 122, 24}, },
            {{65, 90, 16}, {97, 97, 53}, {98, 100, 24}, {101, 101, 54}, {102, 115, 24}, {116, 116, 55}, {117, 120, 24}, {121, 121, 56}, {122, 122, 24}, },
            {{65, 90, 16}, {97, 104, 24}, {105, 105, 57}, {106, 122, 24}, },
            {},
            {},
            {},
            {{34, 122, -7}, },
            {{34, 122, -7}, },
            {{34, 122, -7}, },
            {{0, 127, -16}, },
            {{0, 127, -16}, },
            {{65, 99, -22}, {100, 100, 58}, {101, 122, 24}, },
            {{65, 90, 16}, {97, 115, 24}, {116, 116, 59}, {117, 122, 24}, },
            {{65, 90, 16}, {97, 101, 24}, {102, 102, 60}, {103, 122, 24}, },
            {{65, 90, 16}, {97, 97, 61}, {98, 122, 24}, },
            {{65, 109, -29}, {110, 110, 62}, {111, 122, 24}, },
            {{65, 101, -44}, {102, 102, 63}, {103, 122, 24}, },
            {{65, 90, 16}, {97, 97, 64}, {98, 122, 24}, },
            {{65, 90, 16}, {97, 116, 24}, {117, 117, 65}, {118, 122, 24}, },
            {{65, 115, -43}, {116, 116, 66}, {117, 122, 24}, },
            {{65, 104, -33}, {105, 105, 67}, {106, 122, 24}, },
            {{65, 85, 16}, {86, 86, 68}, {87, 87, 69}, {88, 90, 16}, {97, 122, 24}, },
            {{65, 90, 16}, {97, 119, 24}, {120, 120, 70}, {121, 122, 24}, },
            {{65, 109, -29}, {110, 110, 71}, {111, 122, 24}, },
            {{65, 90, 16}, {97, 108, 24}, {109, 109, 72}, {110, 122, 24}, },
            {{65, 107, -24}, {108, 108, 73}, {109, 115, 24}, {116, 116, 74}, {117, 122, 24}, },
            {{65, 90, 16}, {97, 113, 24}, {114, 114, 75}, {115, 122, 24}, },
            {{65, 90, 16}, {97, 114, 24}, {115, 115, 76}, {116, 122, 24}, },
            {{65, 109, -29}, {110, 110, 77}, {111, 122, 24}, },
            {{65, 79, 16}, {80, 80, 78}, {81, 90, 16}, {97, 122, 24}, },
            {{65, 100, -23}, {101, 101, 79}, {102, 122, 24}, },
            {{65, 90, 16}, {97, 110, 24}, {111, 111, 80}, {112, 122, 24}, },
            {{65, 114, -58}, {115, 115, 81}, {116, 122, 24}, },
            {{65, 101, -44}, {102, 102, 82}, {103, 122, 24}, },
            {{65, 90, 16}, {97, 97, 83}, {98, 122, 24}, },
            {{65, 90, 16}, {97, 118, 24}, {119, 119, 84}, {120, 122, 24}, },
            {{65, 114, -58}, {115, 115, 85}, {116, 122, 24}, },
            {{65, 82, 16}, {83, 83, 86}, {84, 90, 16}, {97, 122, 24}, },
            {{65, 115, -43}, {116, 116, 87}, {117, 122, 24}, },
            {{65, 90, 16}, {97, 97, 88}, {98, 122, 24}, },
            {{65, 104, -33}, {105, 105, 89}, {106, 122, 24}, },
            {{65, 115, -43}, {116, 116, 90}, {117, 122, 24}, },
            {{65, 90, 16}, {97, 106, 24}, {107, 107, 91}, {108, 122, 24}, },
            {{65, 100, -23}, {101, 101, 92}, {102, 122, 24}, },
            {{65, 101, -44}, {102, 102, 93}, {103, 122, 24}, },
            {{65, 66, 16}, {67, 67, 94}, {68, 68, 95}, {69, 90, 16}, {97, 122, 24}, },
            {{65, 90, 16}, {97, 97, 96}, {98, 122, 24}, },
            {{65, 115, -43}, {116, 116, 97}, {117, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 90, 16}, {97, 97, 98}, {98, 122, 24}, },
            {{65, 113, -57}, {114, 114, 99}, {115, 122, 24}, },
            {{65, 113, -57}, {114, 114, 100}, {115, 122, 24}, },
            {{65, 114, -58}, {115, 115, 101}, {116, 122, 24}, },
            {{65, 104, -33}, {105, 105, 102}, {106, 122, 24}, },
            {{65, 116, -49}, {117, 117, 103}, {118, 122, 24}, },
            {{65, 83, 16}, {84, 84, 104}, {85, 90, 16}, {97, 122, 24}, },
            {{65, 90, 16}, {97, 103, 24}, {104, 104, 105}, {105, 122, 24}, },
            {{65, 115, -43}, {116, 116, 106}, {117, 122, 24}, },
            {{65, 66, 16}, {67, 67, 107}, {68, 90, 16}, {97, 122, 24}, },
            {{65, 107, -24}, {108, 108, 108}, {109, 122, 24}, },
            {{65, 109, -29}, {110, 110, 109}, {111, 122, 24}, },
            {{65, 83, 16}, {84, 84, 110}, {85, 122, -86}, },
            {{65, 122, -18}, },
            {{65, 122, -18}, },
            {{65, 81, 16}, {82, 82, 111}, {83, 90, 16}, {97, 122, 24}, },
            {{65, 116, -49}, {117, 117, 112}, {118, 122, 24}, },
            {{65, 104, -33}, {105, 105, 113}, {106, 122, 24}, },
            {{65, 104, -33}, {105, 105, 114}, {106, 122, 24}, },
            {{65, 100, -23}, {101, 101, 115}, {102, 122, 24}, },
            {{65, 115, -43}, {116, 116, 116}, {117, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 100, -23}, {101, 101, 117}, {102, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 90, 16}, {97, 102, 24}, {103, 103, 118}, {104, 122, 24}, },
            {{65, 107, -24}, {108, 108, 119}, {109, 122, 24}, },
            {{65, 110, -62}, {111, 111, 120}, {112, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 90, 16}, {97, 97, 121}, {98, 122, 24}, },
            {{65, 90, 16}, {97, 97, 122}, {98, 122, 24}, },
            {{65, 104, -33}, {105, 105, 123}, {106, 122, 24}, },
            {{65, 109, -29}, {110, 110, 124}, {111, 122, 24}, },
            {{65, 116, -49}, {117, 117, 125}, {118, 122, 24}, },
            {{65, 100, -23}, {101, 101, 126}, {102, 122, 24}, },
            {{65, 113, -57}, {114, 114, 127}, {115, 122, 24}, },
            {{65, 114, -58}, {115, 115, 128}, {116, 122, 24}, },
            {{65, 102, -104}, {103, 103, 129}, {104, 122, 24}, },
            {{65, 108, -55}, {109, 109, 130}, {110, 122, 24}, },
            {{65, 115, -43}, {116, 116, 131}, {117, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 122, -18}, },
            {{65, 115, -43}, {116, 116, 132}, {117, 122, 24}, },
            {{65, 65, 133}, {66, 90, 16}, {97, 122, 24}, },
            {{65, 115, -43}, {116, 116, 134}, {117, 122, 24}, },
            {{65, 113, -57}, {114, 114, 135}, {115, 122, 24}, },
            {{65, 99, -22}, {100, 100, 136}, {101, 122, 24}, },
            {{65, 100, -23}, {101, 101, 137}, {102, 122, 24}, },
            {{65, 113, -57}, {114, 114, 138}, {115, 122, 24}, },
            {{65, 90, 16}, {97, 111, 24}, {112, 112, 139}, {113, 122, 24}, },
            {{65, 79, 16}, {80, 80, 140}, {81, 122, -60}, },
            {{65, 111, -128}, {112, 112, 141}, {113, 122, 24}, },
            {{65, 103, -87}, {104, 104, 142}, {105, 122, 24}, },
            {{65, 79, 16}, {80, 80, 143}, {81, 122, -60}, },
            {{65, 100, -23}, {101, 101, 144}, {102, 122, 24}, },
            {{65, 82, 16}, {83, 83, 145}, {84, 122, -68}, },
            {{65, 107, -24}, {108, 108, 146}, {109, 122, 24}, },
            {{65, 116, -49}, {117, 117, 147}, {118, 122, 24}, },
            {{65, 99, -22}, {100, 100, 148}, {101, 122, 24}, },
            {{65, 66, 16}, {67, 67, 149}, {68, 122, -89}, },
            {{65, 113, -57}, {114, 114, 150}, {115, 122, 24}, },
            {{65, 109, -29}, {110, 110, 151}, {111, 122, 24}, },
            {{65, 107, -24}, {108, 108, 152}, {109, 122, 24}, },
            {{65, 107, -24}, {108, 108, 153}, {109, 122, 24}, },
            {{65, 107, -24}, {108, 108, 154}, {109, 122, 24}, },
            {{65, 115, -43}, {116, 116, 155}, {117, 122, 24}, },
            {{65, 90, 16}, {97, 97, 156}, {98, 122, 24}, },
            {{65, 113, -57}, {114, 114, 157}, {115, 122, 24}, },
            {{65, 115, -43}, {116, 116, 158}, {117, 122, 24}, },
            {{65, 107, -24}, {108, 108, 159}, {109, 122, 24}, },
            {{65, 114, -58}, {115, 115, 160}, {116, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 110, -62}, {111, 111, 161}, {112, 122, 24}, },
            {{65, 69, 16}, {70, 70, 162}, {71, 90, 16}, {97, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 90, 16}, {97, 97, 163}, {98, 122, 24}, },
            {{65, 90, 16}, {97, 97, 164}, {98, 122, 24}, },
            {{65, 90, 16}, {97, 97, 165}, {98, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 104, -33}, {105, 105, 166}, {106, 122, 24}, },
            {{65, 109, -29}, {110, 110, 167}, {111, 122, 24}, },
            {{65, 90, 16}, {97, 97, 168}, {98, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 122, -18}, },
            {{65, 108, -55}, {109, 109, 169}, {110, 122, 24}, },
            {{65, 110, -62}, {111, 111, 170}, {112, 122, 24}, },
            {{65, 90, 16}, {97, 98, 24}, {99, 99, 171}, {100, 122, 24}, },
            {{65, 90, 16}, {97, 120, 24}, {121, 121, 172}, {122, 122, 24}, },
            {{65, 120, -166}, {121, 121, 173}, {122, 122, 24}, },
            {{65, 113, -57}, {114, 114, 174}, {115, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 115, -43}, {116, 116, 175}, {117, 122, 24}, },
            {{65, 90, 16}, {97, 97, 24}, {98, 98, 176}, {99, 122, 24}, },
            {{65, 116, -49}, {117, 117, 177}, {118, 122, 24}, },
            {{65, 100, -23}, {101, 101, 178}, {102, 122, 24}, },
            {{65, 100, -23}, {101, 101, 179}, {102, 122, 24}, },
            {{65, 82, 16}, {83, 83, 180}, {84, 122, -68}, },
            {{65, 122, -18}, },
            {{65, 116, -49}, {117, 117, 181}, {118, 122, 24}, },
            {{65, 104, -33}, {105, 105, 182}, {106, 122, 24}, },
            {{65, 109, -29}, {110, 110, 183}, {111, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 113, -57}, {114, 114, 184}, {115, 122, 24}, },
            {{65, 104, -33}, {105, 105, 185}, {106, 122, 24}, },
            {{65, 114, -58}, {115, 115, 186}, {116, 122, 24}, },
            {{65, 109, -29}, {110, 110, 187}, {111, 122, 24}, },
            {{65, 99, -22}, {100, 100, 188}, {101, 122, 24}, },
            {{65, 72, 16}, {73, 73, 189}, {74, 90, 16}, {97, 122, 24}, },
            {{65, 90, 16}, {97, 121, 24}, {122, 122, 190}, },
            {{65, 122, -18}, },
            {{65, 90, 16}, {97, 97, 191}, {98, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 67, 16}, {68, 68, 192}, {69, 122, -76}, },
            {{65, 100, -23}, {101, 101, 193}, {102, 122, 24}, },
            {{65, 115, -43}, {116, 116, 194}, {117, 122, 24}, },
            {{65, 122, -18}, },
            {{65, 122, -18}, },
            {{65, 104, -33}, {105, 105, 195}, {106, 122, 24}, },
            {{65, 110, -62}, {111, 111, 196}, {112, 122, 24}, },
            {{65, 109, -29}, {110, 110, 197}, {111, 122, 24}, },
            {{65, 122, -18}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 38, 38, 38, 38, -1, 32, 33, 28, 26, 29, 23, 27, 25, -1, 30, 24, 34, 35, 31, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 36, 37, 39, -1, -1, -1, -1, 40, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 6, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 9, 11, 2, 24, 24, 24, 24, 24, 24, 18, 24, 0, 24, 24, 24, 4, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 17, 5, 24, 19, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 12, 24, 24, 16, 24, 24, 24, 3, 24, 24, 24, 20, 13, 24, 24, 24, 24, 24, 24, 1, 24, 24, 24, 24, 24, 24, 7, 24, 24, 24, 8, 24, 24, 24, 24, 24, 24, 24, 10, 24, 15, 24, 24, 24, 21, 22, 24, 24, 24, 14, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
