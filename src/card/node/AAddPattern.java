/* This file was generated by SableCC (http://www.sablecc.org/). */

package card.node;

import java.util.*;
import card.analysis.*;

@SuppressWarnings("nls")
public final class AAddPattern extends PAddPattern
{
    private TKeywordAddpattern _keywordAddpattern_;
    private TOpLeftLg _opLeftLg_;
    private final LinkedList<PPatternDeclare> _patternDeclare_ = new LinkedList<PPatternDeclare>();
    private TOpRightLg _opRightLg_;

    public AAddPattern()
    {
        // Constructor
    }

    public AAddPattern(
        @SuppressWarnings("hiding") TKeywordAddpattern _keywordAddpattern_,
        @SuppressWarnings("hiding") TOpLeftLg _opLeftLg_,
        @SuppressWarnings("hiding") List<PPatternDeclare> _patternDeclare_,
        @SuppressWarnings("hiding") TOpRightLg _opRightLg_)
    {
        // Constructor
        setKeywordAddpattern(_keywordAddpattern_);

        setOpLeftLg(_opLeftLg_);

        setPatternDeclare(_patternDeclare_);

        setOpRightLg(_opRightLg_);

    }

    @Override
    public Object clone()
    {
        return new AAddPattern(
            cloneNode(this._keywordAddpattern_),
            cloneNode(this._opLeftLg_),
            cloneList(this._patternDeclare_),
            cloneNode(this._opRightLg_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAddPattern(this);
    }

    public TKeywordAddpattern getKeywordAddpattern()
    {
        return this._keywordAddpattern_;
    }

    public void setKeywordAddpattern(TKeywordAddpattern node)
    {
        if(this._keywordAddpattern_ != null)
        {
            this._keywordAddpattern_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keywordAddpattern_ = node;
    }

    public TOpLeftLg getOpLeftLg()
    {
        return this._opLeftLg_;
    }

    public void setOpLeftLg(TOpLeftLg node)
    {
        if(this._opLeftLg_ != null)
        {
            this._opLeftLg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opLeftLg_ = node;
    }

    public LinkedList<PPatternDeclare> getPatternDeclare()
    {
        return this._patternDeclare_;
    }

    public void setPatternDeclare(List<PPatternDeclare> list)
    {
        this._patternDeclare_.clear();
        this._patternDeclare_.addAll(list);
        for(PPatternDeclare e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TOpRightLg getOpRightLg()
    {
        return this._opRightLg_;
    }

    public void setOpRightLg(TOpRightLg node)
    {
        if(this._opRightLg_ != null)
        {
            this._opRightLg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opRightLg_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._keywordAddpattern_)
            + toString(this._opLeftLg_)
            + toString(this._patternDeclare_)
            + toString(this._opRightLg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._keywordAddpattern_ == child)
        {
            this._keywordAddpattern_ = null;
            return;
        }

        if(this._opLeftLg_ == child)
        {
            this._opLeftLg_ = null;
            return;
        }

        if(this._patternDeclare_.remove(child))
        {
            return;
        }

        if(this._opRightLg_ == child)
        {
            this._opRightLg_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._keywordAddpattern_ == oldChild)
        {
            setKeywordAddpattern((TKeywordAddpattern) newChild);
            return;
        }

        if(this._opLeftLg_ == oldChild)
        {
            setOpLeftLg((TOpLeftLg) newChild);
            return;
        }

        for(ListIterator<PPatternDeclare> i = this._patternDeclare_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PPatternDeclare) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._opRightLg_ == oldChild)
        {
            setOpRightLg((TOpRightLg) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
