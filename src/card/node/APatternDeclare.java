/* This file was generated by SableCC (http://www.sablecc.org/). */

package card.node;

import card.analysis.*;

@SuppressWarnings("nls")
public final class APatternDeclare extends PPatternDeclare
{
    private PPattern _pattern_;
    private TOpColon _opColon_;
    private PPatternDeclareCombine _patternDeclareCombine_;
    private PPatternDeclareCompare _patternDeclareCompare_;
    private PPatternDeclareOver _patternDeclareOver_;

    public APatternDeclare()
    {
        // Constructor
    }

    public APatternDeclare(
        @SuppressWarnings("hiding") PPattern _pattern_,
        @SuppressWarnings("hiding") TOpColon _opColon_,
        @SuppressWarnings("hiding") PPatternDeclareCombine _patternDeclareCombine_,
        @SuppressWarnings("hiding") PPatternDeclareCompare _patternDeclareCompare_,
        @SuppressWarnings("hiding") PPatternDeclareOver _patternDeclareOver_)
    {
        // Constructor
        setPattern(_pattern_);

        setOpColon(_opColon_);

        setPatternDeclareCombine(_patternDeclareCombine_);

        setPatternDeclareCompare(_patternDeclareCompare_);

        setPatternDeclareOver(_patternDeclareOver_);

    }

    @Override
    public Object clone()
    {
        return new APatternDeclare(
            cloneNode(this._pattern_),
            cloneNode(this._opColon_),
            cloneNode(this._patternDeclareCombine_),
            cloneNode(this._patternDeclareCompare_),
            cloneNode(this._patternDeclareOver_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPatternDeclare(this);
    }

    public PPattern getPattern()
    {
        return this._pattern_;
    }

    public void setPattern(PPattern node)
    {
        if(this._pattern_ != null)
        {
            this._pattern_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pattern_ = node;
    }

    public TOpColon getOpColon()
    {
        return this._opColon_;
    }

    public void setOpColon(TOpColon node)
    {
        if(this._opColon_ != null)
        {
            this._opColon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opColon_ = node;
    }

    public PPatternDeclareCombine getPatternDeclareCombine()
    {
        return this._patternDeclareCombine_;
    }

    public void setPatternDeclareCombine(PPatternDeclareCombine node)
    {
        if(this._patternDeclareCombine_ != null)
        {
            this._patternDeclareCombine_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._patternDeclareCombine_ = node;
    }

    public PPatternDeclareCompare getPatternDeclareCompare()
    {
        return this._patternDeclareCompare_;
    }

    public void setPatternDeclareCompare(PPatternDeclareCompare node)
    {
        if(this._patternDeclareCompare_ != null)
        {
            this._patternDeclareCompare_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._patternDeclareCompare_ = node;
    }

    public PPatternDeclareOver getPatternDeclareOver()
    {
        return this._patternDeclareOver_;
    }

    public void setPatternDeclareOver(PPatternDeclareOver node)
    {
        if(this._patternDeclareOver_ != null)
        {
            this._patternDeclareOver_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._patternDeclareOver_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pattern_)
            + toString(this._opColon_)
            + toString(this._patternDeclareCombine_)
            + toString(this._patternDeclareCompare_)
            + toString(this._patternDeclareOver_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pattern_ == child)
        {
            this._pattern_ = null;
            return;
        }

        if(this._opColon_ == child)
        {
            this._opColon_ = null;
            return;
        }

        if(this._patternDeclareCombine_ == child)
        {
            this._patternDeclareCombine_ = null;
            return;
        }

        if(this._patternDeclareCompare_ == child)
        {
            this._patternDeclareCompare_ = null;
            return;
        }

        if(this._patternDeclareOver_ == child)
        {
            this._patternDeclareOver_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pattern_ == oldChild)
        {
            setPattern((PPattern) newChild);
            return;
        }

        if(this._opColon_ == oldChild)
        {
            setOpColon((TOpColon) newChild);
            return;
        }

        if(this._patternDeclareCombine_ == oldChild)
        {
            setPatternDeclareCombine((PPatternDeclareCombine) newChild);
            return;
        }

        if(this._patternDeclareCompare_ == oldChild)
        {
            setPatternDeclareCompare((PPatternDeclareCompare) newChild);
            return;
        }

        if(this._patternDeclareOver_ == oldChild)
        {
            setPatternDeclareOver((PPatternDeclareOver) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
