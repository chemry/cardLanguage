/* This file was generated by SableCC (http://www.sablecc.org/). */

package card.node;

import card.analysis.*;

@SuppressWarnings("nls")
public final class ARestPatternOverRest extends PPatternOverRest
{
    private TOpComma _opComma_;
    private PPattern _pattern_;
    private PPatternOverRest _patternOverRest_;

    public ARestPatternOverRest()
    {
        // Constructor
    }

    public ARestPatternOverRest(
        @SuppressWarnings("hiding") TOpComma _opComma_,
        @SuppressWarnings("hiding") PPattern _pattern_,
        @SuppressWarnings("hiding") PPatternOverRest _patternOverRest_)
    {
        // Constructor
        setOpComma(_opComma_);

        setPattern(_pattern_);

        setPatternOverRest(_patternOverRest_);

    }

    @Override
    public Object clone()
    {
        return new ARestPatternOverRest(
            cloneNode(this._opComma_),
            cloneNode(this._pattern_),
            cloneNode(this._patternOverRest_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARestPatternOverRest(this);
    }

    public TOpComma getOpComma()
    {
        return this._opComma_;
    }

    public void setOpComma(TOpComma node)
    {
        if(this._opComma_ != null)
        {
            this._opComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opComma_ = node;
    }

    public PPattern getPattern()
    {
        return this._pattern_;
    }

    public void setPattern(PPattern node)
    {
        if(this._pattern_ != null)
        {
            this._pattern_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pattern_ = node;
    }

    public PPatternOverRest getPatternOverRest()
    {
        return this._patternOverRest_;
    }

    public void setPatternOverRest(PPatternOverRest node)
    {
        if(this._patternOverRest_ != null)
        {
            this._patternOverRest_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._patternOverRest_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._opComma_)
            + toString(this._pattern_)
            + toString(this._patternOverRest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._opComma_ == child)
        {
            this._opComma_ = null;
            return;
        }

        if(this._pattern_ == child)
        {
            this._pattern_ = null;
            return;
        }

        if(this._patternOverRest_ == child)
        {
            this._patternOverRest_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._opComma_ == oldChild)
        {
            setOpComma((TOpComma) newChild);
            return;
        }

        if(this._pattern_ == oldChild)
        {
            setPattern((PPattern) newChild);
            return;
        }

        if(this._patternOverRest_ == oldChild)
        {
            setPatternOverRest((PPatternOverRest) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
