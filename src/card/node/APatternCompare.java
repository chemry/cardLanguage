/* This file was generated by SableCC (http://www.sablecc.org/). */

package card.node;

import card.analysis.*;

@SuppressWarnings("nls")
public final class APatternCompare extends PPatternCompare
{
    private PCompareRule _compareRule_;
    private PCompareRest _compareRest_;

    public APatternCompare()
    {
        // Constructor
    }

    public APatternCompare(
        @SuppressWarnings("hiding") PCompareRule _compareRule_,
        @SuppressWarnings("hiding") PCompareRest _compareRest_)
    {
        // Constructor
        setCompareRule(_compareRule_);

        setCompareRest(_compareRest_);

    }

    @Override
    public Object clone()
    {
        return new APatternCompare(
            cloneNode(this._compareRule_),
            cloneNode(this._compareRest_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPatternCompare(this);
    }

    public PCompareRule getCompareRule()
    {
        return this._compareRule_;
    }

    public void setCompareRule(PCompareRule node)
    {
        if(this._compareRule_ != null)
        {
            this._compareRule_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compareRule_ = node;
    }

    public PCompareRest getCompareRest()
    {
        return this._compareRest_;
    }

    public void setCompareRest(PCompareRest node)
    {
        if(this._compareRest_ != null)
        {
            this._compareRest_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compareRest_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._compareRule_)
            + toString(this._compareRest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._compareRule_ == child)
        {
            this._compareRule_ = null;
            return;
        }

        if(this._compareRest_ == child)
        {
            this._compareRest_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._compareRule_ == oldChild)
        {
            setCompareRule((PCompareRule) newChild);
            return;
        }

        if(this._compareRest_ == oldChild)
        {
            setCompareRest((PCompareRest) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
