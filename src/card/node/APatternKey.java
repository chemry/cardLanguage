/* This file was generated by SableCC (http://www.sablecc.org/). */

package card.node;

import card.analysis.*;

@SuppressWarnings("nls")
public final class APatternKey extends PPatternKey
{
    private PPatternKeyword _patternKeyword_;
    private TOpLeftMi _opLeftMi_;
    private PRange _range_;
    private TOpRightMi _opRightMi_;

    public APatternKey()
    {
        // Constructor
    }

    public APatternKey(
        @SuppressWarnings("hiding") PPatternKeyword _patternKeyword_,
        @SuppressWarnings("hiding") TOpLeftMi _opLeftMi_,
        @SuppressWarnings("hiding") PRange _range_,
        @SuppressWarnings("hiding") TOpRightMi _opRightMi_)
    {
        // Constructor
        setPatternKeyword(_patternKeyword_);

        setOpLeftMi(_opLeftMi_);

        setRange(_range_);

        setOpRightMi(_opRightMi_);

    }

    @Override
    public Object clone()
    {
        return new APatternKey(
            cloneNode(this._patternKeyword_),
            cloneNode(this._opLeftMi_),
            cloneNode(this._range_),
            cloneNode(this._opRightMi_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPatternKey(this);
    }

    public PPatternKeyword getPatternKeyword()
    {
        return this._patternKeyword_;
    }

    public void setPatternKeyword(PPatternKeyword node)
    {
        if(this._patternKeyword_ != null)
        {
            this._patternKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._patternKeyword_ = node;
    }

    public TOpLeftMi getOpLeftMi()
    {
        return this._opLeftMi_;
    }

    public void setOpLeftMi(TOpLeftMi node)
    {
        if(this._opLeftMi_ != null)
        {
            this._opLeftMi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opLeftMi_ = node;
    }

    public PRange getRange()
    {
        return this._range_;
    }

    public void setRange(PRange node)
    {
        if(this._range_ != null)
        {
            this._range_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._range_ = node;
    }

    public TOpRightMi getOpRightMi()
    {
        return this._opRightMi_;
    }

    public void setOpRightMi(TOpRightMi node)
    {
        if(this._opRightMi_ != null)
        {
            this._opRightMi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opRightMi_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._patternKeyword_)
            + toString(this._opLeftMi_)
            + toString(this._range_)
            + toString(this._opRightMi_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._patternKeyword_ == child)
        {
            this._patternKeyword_ = null;
            return;
        }

        if(this._opLeftMi_ == child)
        {
            this._opLeftMi_ = null;
            return;
        }

        if(this._range_ == child)
        {
            this._range_ = null;
            return;
        }

        if(this._opRightMi_ == child)
        {
            this._opRightMi_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._patternKeyword_ == oldChild)
        {
            setPatternKeyword((PPatternKeyword) newChild);
            return;
        }

        if(this._opLeftMi_ == oldChild)
        {
            setOpLeftMi((TOpLeftMi) newChild);
            return;
        }

        if(this._range_ == oldChild)
        {
            setRange((PRange) newChild);
            return;
        }

        if(this._opRightMi_ == oldChild)
        {
            setOpRightMi((TOpRightMi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
