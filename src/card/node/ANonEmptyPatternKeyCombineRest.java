/* This file was generated by SableCC (http://www.sablecc.org/). */

package card.node;

import card.analysis.*;

@SuppressWarnings("nls")
public final class ANonEmptyPatternKeyCombineRest extends PPatternKeyCombineRest
{
    private TOpComma _opComma_;
    private PPatternKey _patternKey_;
    private PPatternKeyCombineRest _patternKeyCombineRest_;

    public ANonEmptyPatternKeyCombineRest()
    {
        // Constructor
    }

    public ANonEmptyPatternKeyCombineRest(
        @SuppressWarnings("hiding") TOpComma _opComma_,
        @SuppressWarnings("hiding") PPatternKey _patternKey_,
        @SuppressWarnings("hiding") PPatternKeyCombineRest _patternKeyCombineRest_)
    {
        // Constructor
        setOpComma(_opComma_);

        setPatternKey(_patternKey_);

        setPatternKeyCombineRest(_patternKeyCombineRest_);

    }

    @Override
    public Object clone()
    {
        return new ANonEmptyPatternKeyCombineRest(
            cloneNode(this._opComma_),
            cloneNode(this._patternKey_),
            cloneNode(this._patternKeyCombineRest_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANonEmptyPatternKeyCombineRest(this);
    }

    public TOpComma getOpComma()
    {
        return this._opComma_;
    }

    public void setOpComma(TOpComma node)
    {
        if(this._opComma_ != null)
        {
            this._opComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opComma_ = node;
    }

    public PPatternKey getPatternKey()
    {
        return this._patternKey_;
    }

    public void setPatternKey(PPatternKey node)
    {
        if(this._patternKey_ != null)
        {
            this._patternKey_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._patternKey_ = node;
    }

    public PPatternKeyCombineRest getPatternKeyCombineRest()
    {
        return this._patternKeyCombineRest_;
    }

    public void setPatternKeyCombineRest(PPatternKeyCombineRest node)
    {
        if(this._patternKeyCombineRest_ != null)
        {
            this._patternKeyCombineRest_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._patternKeyCombineRest_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._opComma_)
            + toString(this._patternKey_)
            + toString(this._patternKeyCombineRest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._opComma_ == child)
        {
            this._opComma_ = null;
            return;
        }

        if(this._patternKey_ == child)
        {
            this._patternKey_ = null;
            return;
        }

        if(this._patternKeyCombineRest_ == child)
        {
            this._patternKeyCombineRest_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._opComma_ == oldChild)
        {
            setOpComma((TOpComma) newChild);
            return;
        }

        if(this._patternKey_ == oldChild)
        {
            setPatternKey((PPatternKey) newChild);
            return;
        }

        if(this._patternKeyCombineRest_ == oldChild)
        {
            setPatternKeyCombineRest((PPatternKeyCombineRest) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
