/* This file was generated by SableCC (http://www.sablecc.org/). */

package card.node;

import card.analysis.*;

@SuppressWarnings("nls")
public final class AProgram extends PProgram
{
    private PClassDefine _classDefine_;
    private PAddPattern _addPattern_;
    private PConfig _config_;
    private PInitCard _initCard_;
    private PGetStatus _getStatus_;
    private PIsValidCombination _isValidCombination_;
    private PIsWinnerFound _isWinnerFound_;
    private PNextTurn _nextTurn_;

    public AProgram()
    {
        // Constructor
    }

    public AProgram(
        @SuppressWarnings("hiding") PClassDefine _classDefine_,
        @SuppressWarnings("hiding") PAddPattern _addPattern_,
        @SuppressWarnings("hiding") PConfig _config_,
        @SuppressWarnings("hiding") PInitCard _initCard_,
        @SuppressWarnings("hiding") PGetStatus _getStatus_,
        @SuppressWarnings("hiding") PIsValidCombination _isValidCombination_,
        @SuppressWarnings("hiding") PIsWinnerFound _isWinnerFound_,
        @SuppressWarnings("hiding") PNextTurn _nextTurn_)
    {
        // Constructor
        setClassDefine(_classDefine_);

        setAddPattern(_addPattern_);

        setConfig(_config_);

        setInitCard(_initCard_);

        setGetStatus(_getStatus_);

        setIsValidCombination(_isValidCombination_);

        setIsWinnerFound(_isWinnerFound_);

        setNextTurn(_nextTurn_);

    }

    @Override
    public Object clone()
    {
        return new AProgram(
            cloneNode(this._classDefine_),
            cloneNode(this._addPattern_),
            cloneNode(this._config_),
            cloneNode(this._initCard_),
            cloneNode(this._getStatus_),
            cloneNode(this._isValidCombination_),
            cloneNode(this._isWinnerFound_),
            cloneNode(this._nextTurn_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgram(this);
    }

    public PClassDefine getClassDefine()
    {
        return this._classDefine_;
    }

    public void setClassDefine(PClassDefine node)
    {
        if(this._classDefine_ != null)
        {
            this._classDefine_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classDefine_ = node;
    }

    public PAddPattern getAddPattern()
    {
        return this._addPattern_;
    }

    public void setAddPattern(PAddPattern node)
    {
        if(this._addPattern_ != null)
        {
            this._addPattern_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._addPattern_ = node;
    }

    public PConfig getConfig()
    {
        return this._config_;
    }

    public void setConfig(PConfig node)
    {
        if(this._config_ != null)
        {
            this._config_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._config_ = node;
    }

    public PInitCard getInitCard()
    {
        return this._initCard_;
    }

    public void setInitCard(PInitCard node)
    {
        if(this._initCard_ != null)
        {
            this._initCard_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._initCard_ = node;
    }

    public PGetStatus getGetStatus()
    {
        return this._getStatus_;
    }

    public void setGetStatus(PGetStatus node)
    {
        if(this._getStatus_ != null)
        {
            this._getStatus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._getStatus_ = node;
    }

    public PIsValidCombination getIsValidCombination()
    {
        return this._isValidCombination_;
    }

    public void setIsValidCombination(PIsValidCombination node)
    {
        if(this._isValidCombination_ != null)
        {
            this._isValidCombination_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._isValidCombination_ = node;
    }

    public PIsWinnerFound getIsWinnerFound()
    {
        return this._isWinnerFound_;
    }

    public void setIsWinnerFound(PIsWinnerFound node)
    {
        if(this._isWinnerFound_ != null)
        {
            this._isWinnerFound_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._isWinnerFound_ = node;
    }

    public PNextTurn getNextTurn()
    {
        return this._nextTurn_;
    }

    public void setNextTurn(PNextTurn node)
    {
        if(this._nextTurn_ != null)
        {
            this._nextTurn_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nextTurn_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classDefine_)
            + toString(this._addPattern_)
            + toString(this._config_)
            + toString(this._initCard_)
            + toString(this._getStatus_)
            + toString(this._isValidCombination_)
            + toString(this._isWinnerFound_)
            + toString(this._nextTurn_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classDefine_ == child)
        {
            this._classDefine_ = null;
            return;
        }

        if(this._addPattern_ == child)
        {
            this._addPattern_ = null;
            return;
        }

        if(this._config_ == child)
        {
            this._config_ = null;
            return;
        }

        if(this._initCard_ == child)
        {
            this._initCard_ = null;
            return;
        }

        if(this._getStatus_ == child)
        {
            this._getStatus_ = null;
            return;
        }

        if(this._isValidCombination_ == child)
        {
            this._isValidCombination_ = null;
            return;
        }

        if(this._isWinnerFound_ == child)
        {
            this._isWinnerFound_ = null;
            return;
        }

        if(this._nextTurn_ == child)
        {
            this._nextTurn_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classDefine_ == oldChild)
        {
            setClassDefine((PClassDefine) newChild);
            return;
        }

        if(this._addPattern_ == oldChild)
        {
            setAddPattern((PAddPattern) newChild);
            return;
        }

        if(this._config_ == oldChild)
        {
            setConfig((PConfig) newChild);
            return;
        }

        if(this._initCard_ == oldChild)
        {
            setInitCard((PInitCard) newChild);
            return;
        }

        if(this._getStatus_ == oldChild)
        {
            setGetStatus((PGetStatus) newChild);
            return;
        }

        if(this._isValidCombination_ == oldChild)
        {
            setIsValidCombination((PIsValidCombination) newChild);
            return;
        }

        if(this._isWinnerFound_ == oldChild)
        {
            setIsWinnerFound((PIsWinnerFound) newChild);
            return;
        }

        if(this._nextTurn_ == oldChild)
        {
            setNextTurn((PNextTurn) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
