/* This file was generated by SableCC (http://www.sablecc.org/). */

package card.node;

import card.analysis.*;

@SuppressWarnings("nls")
public final class APatternDeclareCombine extends PPatternDeclareCombine
{
    private TOpLeftSm _opLeftSm_;
    private PPatternKeyCombine _patternKeyCombine_;
    private TOpRightSm _opRightSm_;
    private TOpComma _opComma_;

    public APatternDeclareCombine()
    {
        // Constructor
    }

    public APatternDeclareCombine(
        @SuppressWarnings("hiding") TOpLeftSm _opLeftSm_,
        @SuppressWarnings("hiding") PPatternKeyCombine _patternKeyCombine_,
        @SuppressWarnings("hiding") TOpRightSm _opRightSm_,
        @SuppressWarnings("hiding") TOpComma _opComma_)
    {
        // Constructor
        setOpLeftSm(_opLeftSm_);

        setPatternKeyCombine(_patternKeyCombine_);

        setOpRightSm(_opRightSm_);

        setOpComma(_opComma_);

    }

    @Override
    public Object clone()
    {
        return new APatternDeclareCombine(
            cloneNode(this._opLeftSm_),
            cloneNode(this._patternKeyCombine_),
            cloneNode(this._opRightSm_),
            cloneNode(this._opComma_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPatternDeclareCombine(this);
    }

    public TOpLeftSm getOpLeftSm()
    {
        return this._opLeftSm_;
    }

    public void setOpLeftSm(TOpLeftSm node)
    {
        if(this._opLeftSm_ != null)
        {
            this._opLeftSm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opLeftSm_ = node;
    }

    public PPatternKeyCombine getPatternKeyCombine()
    {
        return this._patternKeyCombine_;
    }

    public void setPatternKeyCombine(PPatternKeyCombine node)
    {
        if(this._patternKeyCombine_ != null)
        {
            this._patternKeyCombine_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._patternKeyCombine_ = node;
    }

    public TOpRightSm getOpRightSm()
    {
        return this._opRightSm_;
    }

    public void setOpRightSm(TOpRightSm node)
    {
        if(this._opRightSm_ != null)
        {
            this._opRightSm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opRightSm_ = node;
    }

    public TOpComma getOpComma()
    {
        return this._opComma_;
    }

    public void setOpComma(TOpComma node)
    {
        if(this._opComma_ != null)
        {
            this._opComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opComma_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._opLeftSm_)
            + toString(this._patternKeyCombine_)
            + toString(this._opRightSm_)
            + toString(this._opComma_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._opLeftSm_ == child)
        {
            this._opLeftSm_ = null;
            return;
        }

        if(this._patternKeyCombine_ == child)
        {
            this._patternKeyCombine_ = null;
            return;
        }

        if(this._opRightSm_ == child)
        {
            this._opRightSm_ = null;
            return;
        }

        if(this._opComma_ == child)
        {
            this._opComma_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._opLeftSm_ == oldChild)
        {
            setOpLeftSm((TOpLeftSm) newChild);
            return;
        }

        if(this._patternKeyCombine_ == oldChild)
        {
            setPatternKeyCombine((PPatternKeyCombine) newChild);
            return;
        }

        if(this._opRightSm_ == oldChild)
        {
            setOpRightSm((TOpRightSm) newChild);
            return;
        }

        if(this._opComma_ == oldChild)
        {
            setOpComma((TOpComma) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
